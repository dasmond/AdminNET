/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET
 * 让 .NET 开发更简单、更通用、更流行。前后端分离架构(.NET6/Vue3)，开箱即用紧随前沿技术。<br/><a href='https://gitee.com/zuohuaijun/Admin.NET/'>https://gitee.com/zuohuaijun/Admin.NET</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 515096995@qq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AdminResultString } from '../models';
/**
 * SysWechatNotifyApi - axios parameter creator
 * @export
 */
export const SysWechatNotifyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysWechatNotifyReceiveMessageAppIdPost: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiSysWechatNotifyReceiveMessageAppIdPost.');
            }
            const localVarPath = `/api/sysWechatNotify/receiveMessage/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} timestamp 
         * @param {string} nonce 
         * @param {string} signature 
         * @param {string} echoString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost: async (appId: string, timestamp: string, nonce: string, signature: string, echoString: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost.');
            }
            // verify required parameter 'nonce' is not null or undefined
            if (nonce === null || nonce === undefined) {
                throw new RequiredError('nonce','Required parameter nonce was null or undefined when calling apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost.');
            }
            // verify required parameter 'echoString' is not null or undefined
            if (echoString === null || echoString === undefined) {
                throw new RequiredError('echoString','Required parameter echoString was null or undefined when calling apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost.');
            }
            const localVarPath = `/api/sysWechatNotify/verifyMessage/{appId}/{timestamp}/{nonce}/{signature}/{echoString}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"timestamp"}}`, encodeURIComponent(String(timestamp)))
                .replace(`{${"nonce"}}`, encodeURIComponent(String(nonce)))
                .replace(`{${"signature"}}`, encodeURIComponent(String(signature)))
                .replace(`{${"echoString"}}`, encodeURIComponent(String(echoString)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysWechatNotifyApi - functional programming interface
 * @export
 */
export const SysWechatNotifyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysWechatNotifyReceiveMessageAppIdPost(appId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultString>>> {
            const localVarAxiosArgs = await SysWechatNotifyApiAxiosParamCreator(configuration).apiSysWechatNotifyReceiveMessageAppIdPost(appId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} timestamp 
         * @param {string} nonce 
         * @param {string} signature 
         * @param {string} echoString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost(appId: string, timestamp: string, nonce: string, signature: string, echoString: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultString>>> {
            const localVarAxiosArgs = await SysWechatNotifyApiAxiosParamCreator(configuration).apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost(appId, timestamp, nonce, signature, echoString, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SysWechatNotifyApi - factory interface
 * @export
 */
export const SysWechatNotifyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysWechatNotifyReceiveMessageAppIdPost(appId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultString>> {
            return SysWechatNotifyApiFp(configuration).apiSysWechatNotifyReceiveMessageAppIdPost(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} timestamp 
         * @param {string} nonce 
         * @param {string} signature 
         * @param {string} echoString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost(appId: string, timestamp: string, nonce: string, signature: string, echoString: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultString>> {
            return SysWechatNotifyApiFp(configuration).apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost(appId, timestamp, nonce, signature, echoString, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SysWechatNotifyApi - object-oriented interface
 * @export
 * @class SysWechatNotifyApi
 * @extends {BaseAPI}
 */
export class SysWechatNotifyApi extends BaseAPI {
    /**
     * 
     * @param {string} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysWechatNotifyApi
     */
    public async apiSysWechatNotifyReceiveMessageAppIdPost(appId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultString>> {
        return SysWechatNotifyApiFp(this.configuration).apiSysWechatNotifyReceiveMessageAppIdPost(appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} appId 
     * @param {string} timestamp 
     * @param {string} nonce 
     * @param {string} signature 
     * @param {string} echoString 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysWechatNotifyApi
     */
    public async apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost(appId: string, timestamp: string, nonce: string, signature: string, echoString: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultString>> {
        return SysWechatNotifyApiFp(this.configuration).apiSysWechatNotifyVerifyMessageAppIdTimestampNonceSignatureEchoStringPost(appId, timestamp, nonce, signature, echoString, options).then((request) => request(this.axios, this.basePath));
    }
}
