/* tslint:disable */
/* eslint-disable */
/**
 * Admin.NET 通用权限开发平台
 * 让 .NET 开发更简单、更通用、更流行。整合最新技术，模块插件式开发，前后端分离，开箱即用。<br/><u><b><font color='FF0000'> 👮不得利用本项目从事危害国家安全、扰乱社会秩序、侵犯他人合法权益等法律法规禁止的活动！任何基于本项目二次开发而产生的一切法律纠纷和责任，我们不承担任何责任！</font></b></u>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountTypeEnum } from '../models';
import { AdminResultIActionResult } from '../models';
import { AdminResultListSysFile } from '../models';
import { AdminResultSqlSugarPagedListSysFile } from '../models';
import { AdminResultString } from '../models';
import { AdminResultSysFile } from '../models';
import { CardTypeEnum } from '../models';
import { CultureLevelEnum } from '../models';
import { DeleteFileInput } from '../models';
import { GenderEnum } from '../models';
import { PageFileInput } from '../models';
import { StatusEnum } from '../models';
import { SysFile } from '../models';
import { SysOrg } from '../models';
import { SysUser } from '../models';
import { UploadFileFromBase64Input } from '../models';
/**
 * SysFileApi - axios parameter creator
 * @export
 */
export const SysFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除文件 🔖
         * @param {DeleteFileInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileDeletePost: async (body?: DeleteFileInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下载指定文件Base64格式 🔖
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileDownloadFileBase64Post: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/downloadFileBase64`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据文件Id或Url下载 🔖
         * @param {SysFile} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileDownloadFilePost: async (body?: SysFile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/downloadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取文件 🔖
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileFileGet: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取文件分页列表 🔖
         * @param {PageFileInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFilePagePost: async (body?: PageFileInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 文件预览 🔖
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFilePreviewIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiSysFilePreviewIdGet.');
            }
            const localVarPath = `/api/sysFile/preview/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据关联查询附件
         * @param {string} [relationName] 关联对象名称
         * @param {number} [relationId] 关联对象Id
         * @param {string} [fileTypes] 文件类型：多个以\&quot;,\&quot;分割
         * @param {number} [belongId] 所属Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileRelationFilesGet: async (relationName?: string, relationId?: number, fileTypes?: string, belongId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/relationFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (relationName !== undefined) {
                localVarQueryParameter['RelationName'] = relationName;
            }

            if (relationId !== undefined) {
                localVarQueryParameter['RelationId'] = relationId;
            }

            if (fileTypes !== undefined) {
                localVarQueryParameter['FileTypes'] = fileTypes;
            }

            if (belongId !== undefined) {
                localVarQueryParameter['BelongId'] = belongId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新文件 🔖
         * @param {SysFile} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileUpdatePost: async (body?: SysFile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传头像 🔖
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileUploadAvatarPostForm: async (file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/uploadAvatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传文件Base64 🔖
         * @param {UploadFileFromBase64Input} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileUploadFileFromBase64Post: async (body?: UploadFileFromBase64Input, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/uploadFileFromBase64`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传文件 🔖
         * @param {Blob} [file] 
         * @param {string} [path] 
         * @param {string} [savePath] 
         * @param {string} [allowSuffix] 
         * @param {string} [provider] 
         * @param {string} [bucketName] 
         * @param {string} [fileName] 
         * @param {string} [suffix] 
         * @param {string} [filePath] 
         * @param {number} [sizeKb] 
         * @param {string} [sizeInfo] 
         * @param {string} [url] 
         * @param {string} [fileMd5] 
         * @param {string} [relationName] 
         * @param {number} [relationId] 
         * @param {number} [belongId] 
         * @param {string} [fileType] 
         * @param {boolean} [isPublic] 
         * @param {number} [tenantId] 
         * @param {number} [createOrgId2] 
         * @param {number} [createOrgPid] 
         * @param {string} [createOrgName2] 
         * @param {string} [createOrgCode] 
         * @param {number} [createOrgLevel] 
         * @param {string} [createOrgType] 
         * @param {number} [createOrgDirectorId2] 
         * @param {string} [createOrgDirectorAccount] 
         * @param {string} [createOrgDirectorPassword] 
         * @param {string} [createOrgDirectorRealName] 
         * @param {string} [createOrgDirectorNickName] 
         * @param {string} [createOrgDirectorAvatar] 
         * @param {GenderEnum} [createOrgDirectorSex] 
         * @param {number} [createOrgDirectorAge] 
         * @param {Date} [createOrgDirectorBirthday] 
         * @param {string} [createOrgDirectorNation] 
         * @param {string} [createOrgDirectorPhone] 
         * @param {CardTypeEnum} [createOrgDirectorCardType] 
         * @param {string} [createOrgDirectorIdCardNum] 
         * @param {string} [createOrgDirectorEmail] 
         * @param {string} [createOrgDirectorAddress] 
         * @param {CultureLevelEnum} [createOrgDirectorCultureLevel] 
         * @param {string} [createOrgDirectorPoliticalOutlook] 
         * @param {string} [createOrgDirectorCollege] 
         * @param {string} [createOrgDirectorOfficePhone] 
         * @param {string} [createOrgDirectorEmergencyContact] 
         * @param {string} [createOrgDirectorEmergencyPhone] 
         * @param {string} [createOrgDirectorEmergencyAddress] 
         * @param {string} [createOrgDirectorIntroduction] 
         * @param {number} [createOrgDirectorOrderNo] 
         * @param {StatusEnum} [createOrgDirectorStatus] 
         * @param {string} [createOrgDirectorRemark] 
         * @param {AccountTypeEnum} [createOrgDirectorAccountType] 
         * @param {number} [createOrgDirectorOrgId] 
         * @param {number} [createOrgDirectorSysOrgPid] 
         * @param {string} [createOrgDirectorSysOrgName] 
         * @param {string} [createOrgDirectorSysOrgCode] 
         * @param {number} [createOrgDirectorSysOrgLevel] 
         * @param {string} [createOrgDirectorSysOrgType] 
         * @param {number} [createOrgDirectorSysOrgDirectorId] 
         * @param {SysUser} [createOrgDirectorSysOrgDirector] 
         * @param {number} [createOrgDirectorSysOrgOrderNo] 
         * @param {StatusEnum} [createOrgDirectorSysOrgStatus] 
         * @param {string} [createOrgDirectorSysOrgRemark] 
         * @param {Array<SysOrg>} [createOrgDirectorSysOrgChildren] 
         * @param {boolean} [createOrgDirectorSysOrgDisabled] 
         * @param {number} [createOrgDirectorSysOrgTenantId] 
         * @param {Date} [createOrgDirectorSysOrgCreateTime] 
         * @param {Date} [createOrgDirectorSysOrgUpdateTime] 
         * @param {number} [createOrgDirectorSysOrgCreateUserId] 
         * @param {string} [createOrgDirectorSysOrgCreateUserName] 
         * @param {number} [createOrgDirectorSysOrgUpdateUserId] 
         * @param {string} [createOrgDirectorSysOrgUpdateUserName] 
         * @param {boolean} [createOrgDirectorSysOrgIsDelete] 
         * @param {number} [createOrgDirectorSysOrgId] 
         * @param {number} [createOrgDirectorManagerUserId2] 
         * @param {string} [createOrgDirectorManagerUserAccount] 
         * @param {string} [createOrgDirectorManagerUserPassword] 
         * @param {string} [createOrgDirectorManagerUserRealName] 
         * @param {string} [createOrgDirectorManagerUserNickName] 
         * @param {string} [createOrgDirectorManagerUserAvatar] 
         * @param {GenderEnum} [createOrgDirectorManagerUserSex] 
         * @param {number} [createOrgDirectorManagerUserAge] 
         * @param {Date} [createOrgDirectorManagerUserBirthday] 
         * @param {string} [createOrgDirectorManagerUserNation] 
         * @param {string} [createOrgDirectorManagerUserPhone] 
         * @param {CardTypeEnum} [createOrgDirectorManagerUserCardType] 
         * @param {string} [createOrgDirectorManagerUserIdCardNum] 
         * @param {string} [createOrgDirectorManagerUserEmail] 
         * @param {string} [createOrgDirectorManagerUserAddress] 
         * @param {CultureLevelEnum} [createOrgDirectorManagerUserCultureLevel] 
         * @param {string} [createOrgDirectorManagerUserPoliticalOutlook] 
         * @param {string} [createOrgDirectorManagerUserCollege] 
         * @param {string} [createOrgDirectorManagerUserOfficePhone] 
         * @param {string} [createOrgDirectorManagerUserEmergencyContact] 
         * @param {string} [createOrgDirectorManagerUserEmergencyPhone] 
         * @param {string} [createOrgDirectorManagerUserEmergencyAddress] 
         * @param {string} [createOrgDirectorManagerUserIntroduction] 
         * @param {number} [createOrgDirectorManagerUserOrderNo] 
         * @param {StatusEnum} [createOrgDirectorManagerUserStatus] 
         * @param {string} [createOrgDirectorManagerUserRemark] 
         * @param {AccountTypeEnum} [createOrgDirectorManagerUserAccountType] 
         * @param {number} [createOrgDirectorManagerUserOrgId] 
         * @param {number} [createOrgDirectorManagerUserSysOrgPid] 
         * @param {string} [createOrgDirectorManagerUserSysOrgName] 
         * @param {string} [createOrgDirectorManagerUserSysOrgCode] 
         * @param {number} [createOrgDirectorManagerUserSysOrgLevel] 
         * @param {string} [createOrgDirectorManagerUserSysOrgType] 
         * @param {number} [createOrgDirectorManagerUserSysOrgDirectorId] 
         * @param {SysUser} [createOrgDirectorManagerUserSysOrgDirector] 
         * @param {number} [createOrgDirectorManagerUserSysOrgOrderNo] 
         * @param {StatusEnum} [createOrgDirectorManagerUserSysOrgStatus] 
         * @param {string} [createOrgDirectorManagerUserSysOrgRemark] 
         * @param {Array<SysOrg>} [createOrgDirectorManagerUserSysOrgChildren] 
         * @param {boolean} [createOrgDirectorManagerUserSysOrgDisabled] 
         * @param {number} [createOrgDirectorManagerUserSysOrgTenantId] 
         * @param {Date} [createOrgDirectorManagerUserSysOrgCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserSysOrgUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserSysOrgCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysOrgCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserSysOrgUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysOrgUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserSysOrgIsDelete] 
         * @param {number} [createOrgDirectorManagerUserSysOrgId] 
         * @param {number} [createOrgDirectorManagerUserManagerUserId] 
         * @param {SysUser} [createOrgDirectorManagerUserManagerUser] 
         * @param {number} [createOrgDirectorManagerUserPosId] 
         * @param {string} [createOrgDirectorManagerUserSysPosName] 
         * @param {string} [createOrgDirectorManagerUserSysPosCode] 
         * @param {number} [createOrgDirectorManagerUserSysPosOrderNo] 
         * @param {string} [createOrgDirectorManagerUserSysPosRemark] 
         * @param {StatusEnum} [createOrgDirectorManagerUserSysPosStatus] 
         * @param {number} [createOrgDirectorManagerUserSysPosTenantId] 
         * @param {Date} [createOrgDirectorManagerUserSysPosCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserSysPosUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserSysPosCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysPosCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserSysPosUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysPosUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserSysPosIsDelete] 
         * @param {number} [createOrgDirectorManagerUserSysPosId] 
         * @param {string} [createOrgDirectorManagerUserJobNum] 
         * @param {string} [createOrgDirectorManagerUserPosLevel] 
         * @param {string} [createOrgDirectorManagerUserPosTitle] 
         * @param {string} [createOrgDirectorManagerUserExpertise] 
         * @param {string} [createOrgDirectorManagerUserOfficeZone] 
         * @param {string} [createOrgDirectorManagerUserOffice] 
         * @param {Date} [createOrgDirectorManagerUserJoinDate] 
         * @param {string} [createOrgDirectorManagerUserLastLoginIp] 
         * @param {string} [createOrgDirectorManagerUserLastLoginAddress] 
         * @param {Date} [createOrgDirectorManagerUserLastLoginTime] 
         * @param {string} [createOrgDirectorManagerUserLastLoginDevice] 
         * @param {string} [createOrgDirectorManagerUserSignature] 
         * @param {number} [createOrgDirectorManagerUserTenantId] 
         * @param {Date} [createOrgDirectorManagerUserCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserIsDelete] 
         * @param {number} [createOrgDirectorManagerUserId] 
         * @param {number} [createOrgDirectorPosId] 
         * @param {string} [createOrgDirectorSysPosName] 
         * @param {string} [createOrgDirectorSysPosCode] 
         * @param {number} [createOrgDirectorSysPosOrderNo] 
         * @param {string} [createOrgDirectorSysPosRemark] 
         * @param {StatusEnum} [createOrgDirectorSysPosStatus] 
         * @param {number} [createOrgDirectorSysPosTenantId] 
         * @param {Date} [createOrgDirectorSysPosCreateTime] 
         * @param {Date} [createOrgDirectorSysPosUpdateTime] 
         * @param {number} [createOrgDirectorSysPosCreateUserId] 
         * @param {string} [createOrgDirectorSysPosCreateUserName] 
         * @param {number} [createOrgDirectorSysPosUpdateUserId] 
         * @param {string} [createOrgDirectorSysPosUpdateUserName] 
         * @param {boolean} [createOrgDirectorSysPosIsDelete] 
         * @param {number} [createOrgDirectorSysPosId] 
         * @param {string} [createOrgDirectorJobNum] 
         * @param {string} [createOrgDirectorPosLevel] 
         * @param {string} [createOrgDirectorPosTitle] 
         * @param {string} [createOrgDirectorExpertise] 
         * @param {string} [createOrgDirectorOfficeZone] 
         * @param {string} [createOrgDirectorOffice] 
         * @param {Date} [createOrgDirectorJoinDate] 
         * @param {string} [createOrgDirectorLastLoginIp] 
         * @param {string} [createOrgDirectorLastLoginAddress] 
         * @param {Date} [createOrgDirectorLastLoginTime] 
         * @param {string} [createOrgDirectorLastLoginDevice] 
         * @param {string} [createOrgDirectorSignature] 
         * @param {number} [createOrgDirectorTenantId] 
         * @param {Date} [createOrgDirectorCreateTime] 
         * @param {Date} [createOrgDirectorUpdateTime] 
         * @param {number} [createOrgDirectorCreateUserId] 
         * @param {string} [createOrgDirectorCreateUserName] 
         * @param {number} [createOrgDirectorUpdateUserId] 
         * @param {string} [createOrgDirectorUpdateUserName] 
         * @param {boolean} [createOrgDirectorIsDelete] 
         * @param {number} [createOrgDirectorId] 
         * @param {number} [createOrgOrderNo] 
         * @param {StatusEnum} [createOrgStatus] 
         * @param {string} [createOrgRemark] 
         * @param {Array<SysOrg>} [createOrgChildren] 
         * @param {boolean} [createOrgDisabled] 
         * @param {number} [createOrgTenantId] 
         * @param {Date} [createOrgCreateTime] 
         * @param {Date} [createOrgUpdateTime] 
         * @param {number} [createOrgCreateUserId] 
         * @param {string} [createOrgCreateUserName] 
         * @param {number} [createOrgUpdateUserId] 
         * @param {string} [createOrgUpdateUserName] 
         * @param {boolean} [createOrgIsDelete] 
         * @param {number} [createOrgId] 
         * @param {string} [createOrgName] 
         * @param {Date} [createTime] 
         * @param {Date} [updateTime] 
         * @param {number} [createUserId] 
         * @param {string} [createUserName] 
         * @param {number} [updateUserId] 
         * @param {string} [updateUserName] 
         * @param {boolean} [isDelete] 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileUploadFilePostForm: async (file?: Blob, path?: string, savePath?: string, allowSuffix?: string, provider?: string, bucketName?: string, fileName?: string, suffix?: string, filePath?: string, sizeKb?: number, sizeInfo?: string, url?: string, fileMd5?: string, relationName?: string, relationId?: number, belongId?: number, fileType?: string, isPublic?: boolean, tenantId?: number, createOrgId2?: number, createOrgPid?: number, createOrgName2?: string, createOrgCode?: string, createOrgLevel?: number, createOrgType?: string, createOrgDirectorId2?: number, createOrgDirectorAccount?: string, createOrgDirectorPassword?: string, createOrgDirectorRealName?: string, createOrgDirectorNickName?: string, createOrgDirectorAvatar?: string, createOrgDirectorSex?: GenderEnum, createOrgDirectorAge?: number, createOrgDirectorBirthday?: Date, createOrgDirectorNation?: string, createOrgDirectorPhone?: string, createOrgDirectorCardType?: CardTypeEnum, createOrgDirectorIdCardNum?: string, createOrgDirectorEmail?: string, createOrgDirectorAddress?: string, createOrgDirectorCultureLevel?: CultureLevelEnum, createOrgDirectorPoliticalOutlook?: string, createOrgDirectorCollege?: string, createOrgDirectorOfficePhone?: string, createOrgDirectorEmergencyContact?: string, createOrgDirectorEmergencyPhone?: string, createOrgDirectorEmergencyAddress?: string, createOrgDirectorIntroduction?: string, createOrgDirectorOrderNo?: number, createOrgDirectorStatus?: StatusEnum, createOrgDirectorRemark?: string, createOrgDirectorAccountType?: AccountTypeEnum, createOrgDirectorOrgId?: number, createOrgDirectorSysOrgPid?: number, createOrgDirectorSysOrgName?: string, createOrgDirectorSysOrgCode?: string, createOrgDirectorSysOrgLevel?: number, createOrgDirectorSysOrgType?: string, createOrgDirectorSysOrgDirectorId?: number, createOrgDirectorSysOrgDirector?: SysUser, createOrgDirectorSysOrgOrderNo?: number, createOrgDirectorSysOrgStatus?: StatusEnum, createOrgDirectorSysOrgRemark?: string, createOrgDirectorSysOrgChildren?: Array<SysOrg>, createOrgDirectorSysOrgDisabled?: boolean, createOrgDirectorSysOrgTenantId?: number, createOrgDirectorSysOrgCreateTime?: Date, createOrgDirectorSysOrgUpdateTime?: Date, createOrgDirectorSysOrgCreateUserId?: number, createOrgDirectorSysOrgCreateUserName?: string, createOrgDirectorSysOrgUpdateUserId?: number, createOrgDirectorSysOrgUpdateUserName?: string, createOrgDirectorSysOrgIsDelete?: boolean, createOrgDirectorSysOrgId?: number, createOrgDirectorManagerUserId2?: number, createOrgDirectorManagerUserAccount?: string, createOrgDirectorManagerUserPassword?: string, createOrgDirectorManagerUserRealName?: string, createOrgDirectorManagerUserNickName?: string, createOrgDirectorManagerUserAvatar?: string, createOrgDirectorManagerUserSex?: GenderEnum, createOrgDirectorManagerUserAge?: number, createOrgDirectorManagerUserBirthday?: Date, createOrgDirectorManagerUserNation?: string, createOrgDirectorManagerUserPhone?: string, createOrgDirectorManagerUserCardType?: CardTypeEnum, createOrgDirectorManagerUserIdCardNum?: string, createOrgDirectorManagerUserEmail?: string, createOrgDirectorManagerUserAddress?: string, createOrgDirectorManagerUserCultureLevel?: CultureLevelEnum, createOrgDirectorManagerUserPoliticalOutlook?: string, createOrgDirectorManagerUserCollege?: string, createOrgDirectorManagerUserOfficePhone?: string, createOrgDirectorManagerUserEmergencyContact?: string, createOrgDirectorManagerUserEmergencyPhone?: string, createOrgDirectorManagerUserEmergencyAddress?: string, createOrgDirectorManagerUserIntroduction?: string, createOrgDirectorManagerUserOrderNo?: number, createOrgDirectorManagerUserStatus?: StatusEnum, createOrgDirectorManagerUserRemark?: string, createOrgDirectorManagerUserAccountType?: AccountTypeEnum, createOrgDirectorManagerUserOrgId?: number, createOrgDirectorManagerUserSysOrgPid?: number, createOrgDirectorManagerUserSysOrgName?: string, createOrgDirectorManagerUserSysOrgCode?: string, createOrgDirectorManagerUserSysOrgLevel?: number, createOrgDirectorManagerUserSysOrgType?: string, createOrgDirectorManagerUserSysOrgDirectorId?: number, createOrgDirectorManagerUserSysOrgDirector?: SysUser, createOrgDirectorManagerUserSysOrgOrderNo?: number, createOrgDirectorManagerUserSysOrgStatus?: StatusEnum, createOrgDirectorManagerUserSysOrgRemark?: string, createOrgDirectorManagerUserSysOrgChildren?: Array<SysOrg>, createOrgDirectorManagerUserSysOrgDisabled?: boolean, createOrgDirectorManagerUserSysOrgTenantId?: number, createOrgDirectorManagerUserSysOrgCreateTime?: Date, createOrgDirectorManagerUserSysOrgUpdateTime?: Date, createOrgDirectorManagerUserSysOrgCreateUserId?: number, createOrgDirectorManagerUserSysOrgCreateUserName?: string, createOrgDirectorManagerUserSysOrgUpdateUserId?: number, createOrgDirectorManagerUserSysOrgUpdateUserName?: string, createOrgDirectorManagerUserSysOrgIsDelete?: boolean, createOrgDirectorManagerUserSysOrgId?: number, createOrgDirectorManagerUserManagerUserId?: number, createOrgDirectorManagerUserManagerUser?: SysUser, createOrgDirectorManagerUserPosId?: number, createOrgDirectorManagerUserSysPosName?: string, createOrgDirectorManagerUserSysPosCode?: string, createOrgDirectorManagerUserSysPosOrderNo?: number, createOrgDirectorManagerUserSysPosRemark?: string, createOrgDirectorManagerUserSysPosStatus?: StatusEnum, createOrgDirectorManagerUserSysPosTenantId?: number, createOrgDirectorManagerUserSysPosCreateTime?: Date, createOrgDirectorManagerUserSysPosUpdateTime?: Date, createOrgDirectorManagerUserSysPosCreateUserId?: number, createOrgDirectorManagerUserSysPosCreateUserName?: string, createOrgDirectorManagerUserSysPosUpdateUserId?: number, createOrgDirectorManagerUserSysPosUpdateUserName?: string, createOrgDirectorManagerUserSysPosIsDelete?: boolean, createOrgDirectorManagerUserSysPosId?: number, createOrgDirectorManagerUserJobNum?: string, createOrgDirectorManagerUserPosLevel?: string, createOrgDirectorManagerUserPosTitle?: string, createOrgDirectorManagerUserExpertise?: string, createOrgDirectorManagerUserOfficeZone?: string, createOrgDirectorManagerUserOffice?: string, createOrgDirectorManagerUserJoinDate?: Date, createOrgDirectorManagerUserLastLoginIp?: string, createOrgDirectorManagerUserLastLoginAddress?: string, createOrgDirectorManagerUserLastLoginTime?: Date, createOrgDirectorManagerUserLastLoginDevice?: string, createOrgDirectorManagerUserSignature?: string, createOrgDirectorManagerUserTenantId?: number, createOrgDirectorManagerUserCreateTime?: Date, createOrgDirectorManagerUserUpdateTime?: Date, createOrgDirectorManagerUserCreateUserId?: number, createOrgDirectorManagerUserCreateUserName?: string, createOrgDirectorManagerUserUpdateUserId?: number, createOrgDirectorManagerUserUpdateUserName?: string, createOrgDirectorManagerUserIsDelete?: boolean, createOrgDirectorManagerUserId?: number, createOrgDirectorPosId?: number, createOrgDirectorSysPosName?: string, createOrgDirectorSysPosCode?: string, createOrgDirectorSysPosOrderNo?: number, createOrgDirectorSysPosRemark?: string, createOrgDirectorSysPosStatus?: StatusEnum, createOrgDirectorSysPosTenantId?: number, createOrgDirectorSysPosCreateTime?: Date, createOrgDirectorSysPosUpdateTime?: Date, createOrgDirectorSysPosCreateUserId?: number, createOrgDirectorSysPosCreateUserName?: string, createOrgDirectorSysPosUpdateUserId?: number, createOrgDirectorSysPosUpdateUserName?: string, createOrgDirectorSysPosIsDelete?: boolean, createOrgDirectorSysPosId?: number, createOrgDirectorJobNum?: string, createOrgDirectorPosLevel?: string, createOrgDirectorPosTitle?: string, createOrgDirectorExpertise?: string, createOrgDirectorOfficeZone?: string, createOrgDirectorOffice?: string, createOrgDirectorJoinDate?: Date, createOrgDirectorLastLoginIp?: string, createOrgDirectorLastLoginAddress?: string, createOrgDirectorLastLoginTime?: Date, createOrgDirectorLastLoginDevice?: string, createOrgDirectorSignature?: string, createOrgDirectorTenantId?: number, createOrgDirectorCreateTime?: Date, createOrgDirectorUpdateTime?: Date, createOrgDirectorCreateUserId?: number, createOrgDirectorCreateUserName?: string, createOrgDirectorUpdateUserId?: number, createOrgDirectorUpdateUserName?: string, createOrgDirectorIsDelete?: boolean, createOrgDirectorId?: number, createOrgOrderNo?: number, createOrgStatus?: StatusEnum, createOrgRemark?: string, createOrgChildren?: Array<SysOrg>, createOrgDisabled?: boolean, createOrgTenantId?: number, createOrgCreateTime?: Date, createOrgUpdateTime?: Date, createOrgCreateUserId?: number, createOrgCreateUserName?: string, createOrgUpdateUserId?: number, createOrgUpdateUserName?: string, createOrgIsDelete?: boolean, createOrgId?: number, createOrgName?: string, createTime?: Date, updateTime?: Date, createUserId?: number, createUserName?: string, updateUserId?: number, updateUserName?: string, isDelete?: boolean, id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/uploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('File', file as any);
            }

            if (path !== undefined) { 
                localVarFormParams.append('Path', path as any);
            }

            if (savePath !== undefined) { 
                localVarFormParams.append('SavePath', savePath as any);
            }

            if (allowSuffix !== undefined) { 
                localVarFormParams.append('AllowSuffix', allowSuffix as any);
            }

            if (provider !== undefined) { 
                localVarFormParams.append('Provider', provider as any);
            }

            if (bucketName !== undefined) { 
                localVarFormParams.append('BucketName', bucketName as any);
            }

            if (fileName !== undefined) { 
                localVarFormParams.append('FileName', fileName as any);
            }

            if (suffix !== undefined) { 
                localVarFormParams.append('Suffix', suffix as any);
            }

            if (filePath !== undefined) { 
                localVarFormParams.append('FilePath', filePath as any);
            }

            if (sizeKb !== undefined) { 
                localVarFormParams.append('SizeKb', sizeKb as any);
            }

            if (sizeInfo !== undefined) { 
                localVarFormParams.append('SizeInfo', sizeInfo as any);
            }

            if (url !== undefined) { 
                localVarFormParams.append('Url', url as any);
            }

            if (fileMd5 !== undefined) { 
                localVarFormParams.append('FileMd5', fileMd5 as any);
            }

            if (relationName !== undefined) { 
                localVarFormParams.append('RelationName', relationName as any);
            }

            if (relationId !== undefined) { 
                localVarFormParams.append('RelationId', relationId as any);
            }

            if (belongId !== undefined) { 
                localVarFormParams.append('BelongId', belongId as any);
            }

            if (fileType !== undefined) { 
                localVarFormParams.append('FileType', fileType as any);
            }

            if (isPublic !== undefined) { 
                localVarFormParams.append('IsPublic', isPublic as any);
            }

            if (tenantId !== undefined) { 
                localVarFormParams.append('TenantId', tenantId as any);
            }

            if (createOrgId !== undefined) { 
                localVarFormParams.append('CreateOrgId', createOrgId as any);
            }

            if (createOrgPid !== undefined) { 
                localVarFormParams.append('CreateOrg.Pid', createOrgPid as any);
            }

            if (createOrgName !== undefined) { 
                localVarFormParams.append('CreateOrg.Name', createOrgName as any);
            }

            if (createOrgCode !== undefined) { 
                localVarFormParams.append('CreateOrg.Code', createOrgCode as any);
            }

            if (createOrgLevel !== undefined) { 
                localVarFormParams.append('CreateOrg.Level', createOrgLevel as any);
            }

            if (createOrgType !== undefined) { 
                localVarFormParams.append('CreateOrg.Type', createOrgType as any);
            }

            if (createOrgDirectorId !== undefined) { 
                localVarFormParams.append('CreateOrg.DirectorId', createOrgDirectorId as any);
            }

            if (createOrgDirectorAccount !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Account', createOrgDirectorAccount as any);
            }

            if (createOrgDirectorPassword !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Password', createOrgDirectorPassword as any);
            }

            if (createOrgDirectorRealName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.RealName', createOrgDirectorRealName as any);
            }

            if (createOrgDirectorNickName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.NickName', createOrgDirectorNickName as any);
            }

            if (createOrgDirectorAvatar !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Avatar', createOrgDirectorAvatar as any);
            }

            if (createOrgDirectorSex !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Sex', createOrgDirectorSex as any);
            }

            if (createOrgDirectorAge !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Age', createOrgDirectorAge as any);
            }

            if (createOrgDirectorBirthday !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Birthday', createOrgDirectorBirthday as any);
            }

            if (createOrgDirectorNation !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Nation', createOrgDirectorNation as any);
            }

            if (createOrgDirectorPhone !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Phone', createOrgDirectorPhone as any);
            }

            if (createOrgDirectorCardType !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.CardType', createOrgDirectorCardType as any);
            }

            if (createOrgDirectorIdCardNum !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.IdCardNum', createOrgDirectorIdCardNum as any);
            }

            if (createOrgDirectorEmail !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Email', createOrgDirectorEmail as any);
            }

            if (createOrgDirectorAddress !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Address', createOrgDirectorAddress as any);
            }

            if (createOrgDirectorCultureLevel !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.CultureLevel', createOrgDirectorCultureLevel as any);
            }

            if (createOrgDirectorPoliticalOutlook !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.PoliticalOutlook', createOrgDirectorPoliticalOutlook as any);
            }

            if (createOrgDirectorCollege !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.College', createOrgDirectorCollege as any);
            }

            if (createOrgDirectorOfficePhone !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.OfficePhone', createOrgDirectorOfficePhone as any);
            }

            if (createOrgDirectorEmergencyContact !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.EmergencyContact', createOrgDirectorEmergencyContact as any);
            }

            if (createOrgDirectorEmergencyPhone !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.EmergencyPhone', createOrgDirectorEmergencyPhone as any);
            }

            if (createOrgDirectorEmergencyAddress !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.EmergencyAddress', createOrgDirectorEmergencyAddress as any);
            }

            if (createOrgDirectorIntroduction !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Introduction', createOrgDirectorIntroduction as any);
            }

            if (createOrgDirectorOrderNo !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.OrderNo', createOrgDirectorOrderNo as any);
            }

            if (createOrgDirectorStatus !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Status', createOrgDirectorStatus as any);
            }

            if (createOrgDirectorRemark !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Remark', createOrgDirectorRemark as any);
            }

            if (createOrgDirectorAccountType !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.AccountType', createOrgDirectorAccountType as any);
            }

            if (createOrgDirectorOrgId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.OrgId', createOrgDirectorOrgId as any);
            }

            if (createOrgDirectorSysOrgPid !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Pid', createOrgDirectorSysOrgPid as any);
            }

            if (createOrgDirectorSysOrgName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Name', createOrgDirectorSysOrgName as any);
            }

            if (createOrgDirectorSysOrgCode !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Code', createOrgDirectorSysOrgCode as any);
            }

            if (createOrgDirectorSysOrgLevel !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Level', createOrgDirectorSysOrgLevel as any);
            }

            if (createOrgDirectorSysOrgType !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Type', createOrgDirectorSysOrgType as any);
            }

            if (createOrgDirectorSysOrgDirectorId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.DirectorId', createOrgDirectorSysOrgDirectorId as any);
            }

            if (createOrgDirectorSysOrgDirector !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Director', createOrgDirectorSysOrgDirector as any);
            }

            if (createOrgDirectorSysOrgOrderNo !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.OrderNo', createOrgDirectorSysOrgOrderNo as any);
            }

            if (createOrgDirectorSysOrgStatus !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Status', createOrgDirectorSysOrgStatus as any);
            }

            if (createOrgDirectorSysOrgRemark !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Remark', createOrgDirectorSysOrgRemark as any);
            }
            if (createOrgDirectorSysOrgChildren) {
                createOrgDirectorSysOrgChildren.forEach((element) => {
                    localVarFormParams.append('CreateOrg.Director.SysOrg.Children', element as any);
                })
            }

            if (createOrgDirectorSysOrgDisabled !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Disabled', createOrgDirectorSysOrgDisabled as any);
            }

            if (createOrgDirectorSysOrgTenantId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.TenantId', createOrgDirectorSysOrgTenantId as any);
            }

            if (createOrgDirectorSysOrgCreateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.CreateTime', createOrgDirectorSysOrgCreateTime as any);
            }

            if (createOrgDirectorSysOrgUpdateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.UpdateTime', createOrgDirectorSysOrgUpdateTime as any);
            }

            if (createOrgDirectorSysOrgCreateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.CreateUserId', createOrgDirectorSysOrgCreateUserId as any);
            }

            if (createOrgDirectorSysOrgCreateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.CreateUserName', createOrgDirectorSysOrgCreateUserName as any);
            }

            if (createOrgDirectorSysOrgUpdateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.UpdateUserId', createOrgDirectorSysOrgUpdateUserId as any);
            }

            if (createOrgDirectorSysOrgUpdateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.UpdateUserName', createOrgDirectorSysOrgUpdateUserName as any);
            }

            if (createOrgDirectorSysOrgIsDelete !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.IsDelete', createOrgDirectorSysOrgIsDelete as any);
            }

            if (createOrgDirectorSysOrgId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysOrg.Id', createOrgDirectorSysOrgId as any);
            }

            if (createOrgDirectorManagerUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUserId', createOrgDirectorManagerUserId as any);
            }

            if (createOrgDirectorManagerUserAccount !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Account', createOrgDirectorManagerUserAccount as any);
            }

            if (createOrgDirectorManagerUserPassword !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Password', createOrgDirectorManagerUserPassword as any);
            }

            if (createOrgDirectorManagerUserRealName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.RealName', createOrgDirectorManagerUserRealName as any);
            }

            if (createOrgDirectorManagerUserNickName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.NickName', createOrgDirectorManagerUserNickName as any);
            }

            if (createOrgDirectorManagerUserAvatar !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Avatar', createOrgDirectorManagerUserAvatar as any);
            }

            if (createOrgDirectorManagerUserSex !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Sex', createOrgDirectorManagerUserSex as any);
            }

            if (createOrgDirectorManagerUserAge !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Age', createOrgDirectorManagerUserAge as any);
            }

            if (createOrgDirectorManagerUserBirthday !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Birthday', createOrgDirectorManagerUserBirthday as any);
            }

            if (createOrgDirectorManagerUserNation !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Nation', createOrgDirectorManagerUserNation as any);
            }

            if (createOrgDirectorManagerUserPhone !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Phone', createOrgDirectorManagerUserPhone as any);
            }

            if (createOrgDirectorManagerUserCardType !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.CardType', createOrgDirectorManagerUserCardType as any);
            }

            if (createOrgDirectorManagerUserIdCardNum !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.IdCardNum', createOrgDirectorManagerUserIdCardNum as any);
            }

            if (createOrgDirectorManagerUserEmail !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Email', createOrgDirectorManagerUserEmail as any);
            }

            if (createOrgDirectorManagerUserAddress !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Address', createOrgDirectorManagerUserAddress as any);
            }

            if (createOrgDirectorManagerUserCultureLevel !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.CultureLevel', createOrgDirectorManagerUserCultureLevel as any);
            }

            if (createOrgDirectorManagerUserPoliticalOutlook !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.PoliticalOutlook', createOrgDirectorManagerUserPoliticalOutlook as any);
            }

            if (createOrgDirectorManagerUserCollege !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.College', createOrgDirectorManagerUserCollege as any);
            }

            if (createOrgDirectorManagerUserOfficePhone !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.OfficePhone', createOrgDirectorManagerUserOfficePhone as any);
            }

            if (createOrgDirectorManagerUserEmergencyContact !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.EmergencyContact', createOrgDirectorManagerUserEmergencyContact as any);
            }

            if (createOrgDirectorManagerUserEmergencyPhone !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.EmergencyPhone', createOrgDirectorManagerUserEmergencyPhone as any);
            }

            if (createOrgDirectorManagerUserEmergencyAddress !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.EmergencyAddress', createOrgDirectorManagerUserEmergencyAddress as any);
            }

            if (createOrgDirectorManagerUserIntroduction !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Introduction', createOrgDirectorManagerUserIntroduction as any);
            }

            if (createOrgDirectorManagerUserOrderNo !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.OrderNo', createOrgDirectorManagerUserOrderNo as any);
            }

            if (createOrgDirectorManagerUserStatus !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Status', createOrgDirectorManagerUserStatus as any);
            }

            if (createOrgDirectorManagerUserRemark !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Remark', createOrgDirectorManagerUserRemark as any);
            }

            if (createOrgDirectorManagerUserAccountType !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.AccountType', createOrgDirectorManagerUserAccountType as any);
            }

            if (createOrgDirectorManagerUserOrgId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.OrgId', createOrgDirectorManagerUserOrgId as any);
            }

            if (createOrgDirectorManagerUserSysOrgPid !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Pid', createOrgDirectorManagerUserSysOrgPid as any);
            }

            if (createOrgDirectorManagerUserSysOrgName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Name', createOrgDirectorManagerUserSysOrgName as any);
            }

            if (createOrgDirectorManagerUserSysOrgCode !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Code', createOrgDirectorManagerUserSysOrgCode as any);
            }

            if (createOrgDirectorManagerUserSysOrgLevel !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Level', createOrgDirectorManagerUserSysOrgLevel as any);
            }

            if (createOrgDirectorManagerUserSysOrgType !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Type', createOrgDirectorManagerUserSysOrgType as any);
            }

            if (createOrgDirectorManagerUserSysOrgDirectorId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.DirectorId', createOrgDirectorManagerUserSysOrgDirectorId as any);
            }

            if (createOrgDirectorManagerUserSysOrgDirector !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Director', createOrgDirectorManagerUserSysOrgDirector as any);
            }

            if (createOrgDirectorManagerUserSysOrgOrderNo !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.OrderNo', createOrgDirectorManagerUserSysOrgOrderNo as any);
            }

            if (createOrgDirectorManagerUserSysOrgStatus !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Status', createOrgDirectorManagerUserSysOrgStatus as any);
            }

            if (createOrgDirectorManagerUserSysOrgRemark !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Remark', createOrgDirectorManagerUserSysOrgRemark as any);
            }
            if (createOrgDirectorManagerUserSysOrgChildren) {
                createOrgDirectorManagerUserSysOrgChildren.forEach((element) => {
                    localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Children', element as any);
                })
            }

            if (createOrgDirectorManagerUserSysOrgDisabled !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Disabled', createOrgDirectorManagerUserSysOrgDisabled as any);
            }

            if (createOrgDirectorManagerUserSysOrgTenantId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.TenantId', createOrgDirectorManagerUserSysOrgTenantId as any);
            }

            if (createOrgDirectorManagerUserSysOrgCreateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.CreateTime', createOrgDirectorManagerUserSysOrgCreateTime as any);
            }

            if (createOrgDirectorManagerUserSysOrgUpdateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.UpdateTime', createOrgDirectorManagerUserSysOrgUpdateTime as any);
            }

            if (createOrgDirectorManagerUserSysOrgCreateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.CreateUserId', createOrgDirectorManagerUserSysOrgCreateUserId as any);
            }

            if (createOrgDirectorManagerUserSysOrgCreateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.CreateUserName', createOrgDirectorManagerUserSysOrgCreateUserName as any);
            }

            if (createOrgDirectorManagerUserSysOrgUpdateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.UpdateUserId', createOrgDirectorManagerUserSysOrgUpdateUserId as any);
            }

            if (createOrgDirectorManagerUserSysOrgUpdateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.UpdateUserName', createOrgDirectorManagerUserSysOrgUpdateUserName as any);
            }

            if (createOrgDirectorManagerUserSysOrgIsDelete !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.IsDelete', createOrgDirectorManagerUserSysOrgIsDelete as any);
            }

            if (createOrgDirectorManagerUserSysOrgId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysOrg.Id', createOrgDirectorManagerUserSysOrgId as any);
            }

            if (createOrgDirectorManagerUserManagerUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.ManagerUserId', createOrgDirectorManagerUserManagerUserId as any);
            }

            if (createOrgDirectorManagerUserManagerUser !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.ManagerUser', createOrgDirectorManagerUserManagerUser as any);
            }

            if (createOrgDirectorManagerUserPosId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.PosId', createOrgDirectorManagerUserPosId as any);
            }

            if (createOrgDirectorManagerUserSysPosName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.Name', createOrgDirectorManagerUserSysPosName as any);
            }

            if (createOrgDirectorManagerUserSysPosCode !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.Code', createOrgDirectorManagerUserSysPosCode as any);
            }

            if (createOrgDirectorManagerUserSysPosOrderNo !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.OrderNo', createOrgDirectorManagerUserSysPosOrderNo as any);
            }

            if (createOrgDirectorManagerUserSysPosRemark !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.Remark', createOrgDirectorManagerUserSysPosRemark as any);
            }

            if (createOrgDirectorManagerUserSysPosStatus !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.Status', createOrgDirectorManagerUserSysPosStatus as any);
            }

            if (createOrgDirectorManagerUserSysPosTenantId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.TenantId', createOrgDirectorManagerUserSysPosTenantId as any);
            }

            if (createOrgDirectorManagerUserSysPosCreateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.CreateTime', createOrgDirectorManagerUserSysPosCreateTime as any);
            }

            if (createOrgDirectorManagerUserSysPosUpdateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.UpdateTime', createOrgDirectorManagerUserSysPosUpdateTime as any);
            }

            if (createOrgDirectorManagerUserSysPosCreateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.CreateUserId', createOrgDirectorManagerUserSysPosCreateUserId as any);
            }

            if (createOrgDirectorManagerUserSysPosCreateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.CreateUserName', createOrgDirectorManagerUserSysPosCreateUserName as any);
            }

            if (createOrgDirectorManagerUserSysPosUpdateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.UpdateUserId', createOrgDirectorManagerUserSysPosUpdateUserId as any);
            }

            if (createOrgDirectorManagerUserSysPosUpdateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.UpdateUserName', createOrgDirectorManagerUserSysPosUpdateUserName as any);
            }

            if (createOrgDirectorManagerUserSysPosIsDelete !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.IsDelete', createOrgDirectorManagerUserSysPosIsDelete as any);
            }

            if (createOrgDirectorManagerUserSysPosId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.SysPos.Id', createOrgDirectorManagerUserSysPosId as any);
            }

            if (createOrgDirectorManagerUserJobNum !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.JobNum', createOrgDirectorManagerUserJobNum as any);
            }

            if (createOrgDirectorManagerUserPosLevel !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.PosLevel', createOrgDirectorManagerUserPosLevel as any);
            }

            if (createOrgDirectorManagerUserPosTitle !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.PosTitle', createOrgDirectorManagerUserPosTitle as any);
            }

            if (createOrgDirectorManagerUserExpertise !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Expertise', createOrgDirectorManagerUserExpertise as any);
            }

            if (createOrgDirectorManagerUserOfficeZone !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.OfficeZone', createOrgDirectorManagerUserOfficeZone as any);
            }

            if (createOrgDirectorManagerUserOffice !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Office', createOrgDirectorManagerUserOffice as any);
            }

            if (createOrgDirectorManagerUserJoinDate !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.JoinDate', createOrgDirectorManagerUserJoinDate as any);
            }

            if (createOrgDirectorManagerUserLastLoginIp !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.LastLoginIp', createOrgDirectorManagerUserLastLoginIp as any);
            }

            if (createOrgDirectorManagerUserLastLoginAddress !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.LastLoginAddress', createOrgDirectorManagerUserLastLoginAddress as any);
            }

            if (createOrgDirectorManagerUserLastLoginTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.LastLoginTime', createOrgDirectorManagerUserLastLoginTime as any);
            }

            if (createOrgDirectorManagerUserLastLoginDevice !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.LastLoginDevice', createOrgDirectorManagerUserLastLoginDevice as any);
            }

            if (createOrgDirectorManagerUserSignature !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Signature', createOrgDirectorManagerUserSignature as any);
            }

            if (createOrgDirectorManagerUserTenantId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.TenantId', createOrgDirectorManagerUserTenantId as any);
            }

            if (createOrgDirectorManagerUserCreateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.CreateTime', createOrgDirectorManagerUserCreateTime as any);
            }

            if (createOrgDirectorManagerUserUpdateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.UpdateTime', createOrgDirectorManagerUserUpdateTime as any);
            }

            if (createOrgDirectorManagerUserCreateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.CreateUserId', createOrgDirectorManagerUserCreateUserId as any);
            }

            if (createOrgDirectorManagerUserCreateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.CreateUserName', createOrgDirectorManagerUserCreateUserName as any);
            }

            if (createOrgDirectorManagerUserUpdateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.UpdateUserId', createOrgDirectorManagerUserUpdateUserId as any);
            }

            if (createOrgDirectorManagerUserUpdateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.UpdateUserName', createOrgDirectorManagerUserUpdateUserName as any);
            }

            if (createOrgDirectorManagerUserIsDelete !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.IsDelete', createOrgDirectorManagerUserIsDelete as any);
            }

            if (createOrgDirectorManagerUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.ManagerUser.Id', createOrgDirectorManagerUserId as any);
            }

            if (createOrgDirectorPosId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.PosId', createOrgDirectorPosId as any);
            }

            if (createOrgDirectorSysPosName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.Name', createOrgDirectorSysPosName as any);
            }

            if (createOrgDirectorSysPosCode !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.Code', createOrgDirectorSysPosCode as any);
            }

            if (createOrgDirectorSysPosOrderNo !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.OrderNo', createOrgDirectorSysPosOrderNo as any);
            }

            if (createOrgDirectorSysPosRemark !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.Remark', createOrgDirectorSysPosRemark as any);
            }

            if (createOrgDirectorSysPosStatus !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.Status', createOrgDirectorSysPosStatus as any);
            }

            if (createOrgDirectorSysPosTenantId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.TenantId', createOrgDirectorSysPosTenantId as any);
            }

            if (createOrgDirectorSysPosCreateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.CreateTime', createOrgDirectorSysPosCreateTime as any);
            }

            if (createOrgDirectorSysPosUpdateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.UpdateTime', createOrgDirectorSysPosUpdateTime as any);
            }

            if (createOrgDirectorSysPosCreateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.CreateUserId', createOrgDirectorSysPosCreateUserId as any);
            }

            if (createOrgDirectorSysPosCreateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.CreateUserName', createOrgDirectorSysPosCreateUserName as any);
            }

            if (createOrgDirectorSysPosUpdateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.UpdateUserId', createOrgDirectorSysPosUpdateUserId as any);
            }

            if (createOrgDirectorSysPosUpdateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.UpdateUserName', createOrgDirectorSysPosUpdateUserName as any);
            }

            if (createOrgDirectorSysPosIsDelete !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.IsDelete', createOrgDirectorSysPosIsDelete as any);
            }

            if (createOrgDirectorSysPosId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.SysPos.Id', createOrgDirectorSysPosId as any);
            }

            if (createOrgDirectorJobNum !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.JobNum', createOrgDirectorJobNum as any);
            }

            if (createOrgDirectorPosLevel !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.PosLevel', createOrgDirectorPosLevel as any);
            }

            if (createOrgDirectorPosTitle !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.PosTitle', createOrgDirectorPosTitle as any);
            }

            if (createOrgDirectorExpertise !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Expertise', createOrgDirectorExpertise as any);
            }

            if (createOrgDirectorOfficeZone !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.OfficeZone', createOrgDirectorOfficeZone as any);
            }

            if (createOrgDirectorOffice !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Office', createOrgDirectorOffice as any);
            }

            if (createOrgDirectorJoinDate !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.JoinDate', createOrgDirectorJoinDate as any);
            }

            if (createOrgDirectorLastLoginIp !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.LastLoginIp', createOrgDirectorLastLoginIp as any);
            }

            if (createOrgDirectorLastLoginAddress !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.LastLoginAddress', createOrgDirectorLastLoginAddress as any);
            }

            if (createOrgDirectorLastLoginTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.LastLoginTime', createOrgDirectorLastLoginTime as any);
            }

            if (createOrgDirectorLastLoginDevice !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.LastLoginDevice', createOrgDirectorLastLoginDevice as any);
            }

            if (createOrgDirectorSignature !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Signature', createOrgDirectorSignature as any);
            }

            if (createOrgDirectorTenantId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.TenantId', createOrgDirectorTenantId as any);
            }

            if (createOrgDirectorCreateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.CreateTime', createOrgDirectorCreateTime as any);
            }

            if (createOrgDirectorUpdateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.UpdateTime', createOrgDirectorUpdateTime as any);
            }

            if (createOrgDirectorCreateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.CreateUserId', createOrgDirectorCreateUserId as any);
            }

            if (createOrgDirectorCreateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.CreateUserName', createOrgDirectorCreateUserName as any);
            }

            if (createOrgDirectorUpdateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.UpdateUserId', createOrgDirectorUpdateUserId as any);
            }

            if (createOrgDirectorUpdateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.UpdateUserName', createOrgDirectorUpdateUserName as any);
            }

            if (createOrgDirectorIsDelete !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.IsDelete', createOrgDirectorIsDelete as any);
            }

            if (createOrgDirectorId !== undefined) { 
                localVarFormParams.append('CreateOrg.Director.Id', createOrgDirectorId as any);
            }

            if (createOrgOrderNo !== undefined) { 
                localVarFormParams.append('CreateOrg.OrderNo', createOrgOrderNo as any);
            }

            if (createOrgStatus !== undefined) { 
                localVarFormParams.append('CreateOrg.Status', createOrgStatus as any);
            }

            if (createOrgRemark !== undefined) { 
                localVarFormParams.append('CreateOrg.Remark', createOrgRemark as any);
            }
            if (createOrgChildren) {
                createOrgChildren.forEach((element) => {
                    localVarFormParams.append('CreateOrg.Children', element as any);
                })
            }

            if (createOrgDisabled !== undefined) { 
                localVarFormParams.append('CreateOrg.Disabled', createOrgDisabled as any);
            }

            if (createOrgTenantId !== undefined) { 
                localVarFormParams.append('CreateOrg.TenantId', createOrgTenantId as any);
            }

            if (createOrgCreateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.CreateTime', createOrgCreateTime as any);
            }

            if (createOrgUpdateTime !== undefined) { 
                localVarFormParams.append('CreateOrg.UpdateTime', createOrgUpdateTime as any);
            }

            if (createOrgCreateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.CreateUserId', createOrgCreateUserId as any);
            }

            if (createOrgCreateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.CreateUserName', createOrgCreateUserName as any);
            }

            if (createOrgUpdateUserId !== undefined) { 
                localVarFormParams.append('CreateOrg.UpdateUserId', createOrgUpdateUserId as any);
            }

            if (createOrgUpdateUserName !== undefined) { 
                localVarFormParams.append('CreateOrg.UpdateUserName', createOrgUpdateUserName as any);
            }

            if (createOrgIsDelete !== undefined) { 
                localVarFormParams.append('CreateOrg.IsDelete', createOrgIsDelete as any);
            }

            if (createOrgId !== undefined) { 
                localVarFormParams.append('CreateOrg.Id', createOrgId as any);
            }

            if (createOrgName !== undefined) { 
                localVarFormParams.append('CreateOrgName', createOrgName as any);
            }

            if (createTime !== undefined) { 
                localVarFormParams.append('CreateTime', createTime as any);
            }

            if (updateTime !== undefined) { 
                localVarFormParams.append('UpdateTime', updateTime as any);
            }

            if (createUserId !== undefined) { 
                localVarFormParams.append('CreateUserId', createUserId as any);
            }

            if (createUserName !== undefined) { 
                localVarFormParams.append('CreateUserName', createUserName as any);
            }

            if (updateUserId !== undefined) { 
                localVarFormParams.append('UpdateUserId', updateUserId as any);
            }

            if (updateUserName !== undefined) { 
                localVarFormParams.append('UpdateUserName', updateUserName as any);
            }

            if (isDelete !== undefined) { 
                localVarFormParams.append('IsDelete', isDelete as any);
            }

            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传多文件 🔖
         * @param {Array<Blob>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileUploadFilesPostForm: async (files?: Array<Blob>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/uploadFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传电子签名 🔖
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSysFileUploadSignaturePostForm: async (file?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sysFile/uploadSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysFileApi - functional programming interface
 * @export
 */
export const SysFileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除文件 🔖
         * @param {DeleteFileInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileDeletePost(body?: DeleteFileInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 下载指定文件Base64格式 🔖
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileDownloadFileBase64Post(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultString>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileDownloadFileBase64Post(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据文件Id或Url下载 🔖
         * @param {SysFile} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileDownloadFilePost(body?: SysFile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultIActionResult>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileDownloadFilePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取文件 🔖
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileFileGet(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSysFile>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileFileGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取文件分页列表 🔖
         * @param {PageFileInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFilePagePost(body?: PageFileInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListSysFile>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFilePagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 文件预览 🔖
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFilePreviewIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultIActionResult>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFilePreviewIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据关联查询附件
         * @param {string} [relationName] 关联对象名称
         * @param {number} [relationId] 关联对象Id
         * @param {string} [fileTypes] 文件类型：多个以\&quot;,\&quot;分割
         * @param {number} [belongId] 所属Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileRelationFilesGet(relationName?: string, relationId?: number, fileTypes?: string, belongId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListSysFile>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileRelationFilesGet(relationName, relationId, fileTypes, belongId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新文件 🔖
         * @param {SysFile} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUpdatePost(body?: SysFile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传头像 🔖
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadAvatarPostForm(file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSysFile>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileUploadAvatarPostForm(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传文件Base64 🔖
         * @param {UploadFileFromBase64Input} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadFileFromBase64Post(body?: UploadFileFromBase64Input, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSysFile>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileUploadFileFromBase64Post(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传文件 🔖
         * @param {Blob} [file] 
         * @param {string} [path] 
         * @param {string} [savePath] 
         * @param {string} [allowSuffix] 
         * @param {string} [provider] 
         * @param {string} [bucketName] 
         * @param {string} [fileName] 
         * @param {string} [suffix] 
         * @param {string} [filePath] 
         * @param {number} [sizeKb] 
         * @param {string} [sizeInfo] 
         * @param {string} [url] 
         * @param {string} [fileMd5] 
         * @param {string} [relationName] 
         * @param {number} [relationId] 
         * @param {number} [belongId] 
         * @param {string} [fileType] 
         * @param {boolean} [isPublic] 
         * @param {number} [tenantId] 
         * @param {number} [createOrgId2] 
         * @param {number} [createOrgPid] 
         * @param {string} [createOrgName2] 
         * @param {string} [createOrgCode] 
         * @param {number} [createOrgLevel] 
         * @param {string} [createOrgType] 
         * @param {number} [createOrgDirectorId2] 
         * @param {string} [createOrgDirectorAccount] 
         * @param {string} [createOrgDirectorPassword] 
         * @param {string} [createOrgDirectorRealName] 
         * @param {string} [createOrgDirectorNickName] 
         * @param {string} [createOrgDirectorAvatar] 
         * @param {GenderEnum} [createOrgDirectorSex] 
         * @param {number} [createOrgDirectorAge] 
         * @param {Date} [createOrgDirectorBirthday] 
         * @param {string} [createOrgDirectorNation] 
         * @param {string} [createOrgDirectorPhone] 
         * @param {CardTypeEnum} [createOrgDirectorCardType] 
         * @param {string} [createOrgDirectorIdCardNum] 
         * @param {string} [createOrgDirectorEmail] 
         * @param {string} [createOrgDirectorAddress] 
         * @param {CultureLevelEnum} [createOrgDirectorCultureLevel] 
         * @param {string} [createOrgDirectorPoliticalOutlook] 
         * @param {string} [createOrgDirectorCollege] 
         * @param {string} [createOrgDirectorOfficePhone] 
         * @param {string} [createOrgDirectorEmergencyContact] 
         * @param {string} [createOrgDirectorEmergencyPhone] 
         * @param {string} [createOrgDirectorEmergencyAddress] 
         * @param {string} [createOrgDirectorIntroduction] 
         * @param {number} [createOrgDirectorOrderNo] 
         * @param {StatusEnum} [createOrgDirectorStatus] 
         * @param {string} [createOrgDirectorRemark] 
         * @param {AccountTypeEnum} [createOrgDirectorAccountType] 
         * @param {number} [createOrgDirectorOrgId] 
         * @param {number} [createOrgDirectorSysOrgPid] 
         * @param {string} [createOrgDirectorSysOrgName] 
         * @param {string} [createOrgDirectorSysOrgCode] 
         * @param {number} [createOrgDirectorSysOrgLevel] 
         * @param {string} [createOrgDirectorSysOrgType] 
         * @param {number} [createOrgDirectorSysOrgDirectorId] 
         * @param {SysUser} [createOrgDirectorSysOrgDirector] 
         * @param {number} [createOrgDirectorSysOrgOrderNo] 
         * @param {StatusEnum} [createOrgDirectorSysOrgStatus] 
         * @param {string} [createOrgDirectorSysOrgRemark] 
         * @param {Array<SysOrg>} [createOrgDirectorSysOrgChildren] 
         * @param {boolean} [createOrgDirectorSysOrgDisabled] 
         * @param {number} [createOrgDirectorSysOrgTenantId] 
         * @param {Date} [createOrgDirectorSysOrgCreateTime] 
         * @param {Date} [createOrgDirectorSysOrgUpdateTime] 
         * @param {number} [createOrgDirectorSysOrgCreateUserId] 
         * @param {string} [createOrgDirectorSysOrgCreateUserName] 
         * @param {number} [createOrgDirectorSysOrgUpdateUserId] 
         * @param {string} [createOrgDirectorSysOrgUpdateUserName] 
         * @param {boolean} [createOrgDirectorSysOrgIsDelete] 
         * @param {number} [createOrgDirectorSysOrgId] 
         * @param {number} [createOrgDirectorManagerUserId2] 
         * @param {string} [createOrgDirectorManagerUserAccount] 
         * @param {string} [createOrgDirectorManagerUserPassword] 
         * @param {string} [createOrgDirectorManagerUserRealName] 
         * @param {string} [createOrgDirectorManagerUserNickName] 
         * @param {string} [createOrgDirectorManagerUserAvatar] 
         * @param {GenderEnum} [createOrgDirectorManagerUserSex] 
         * @param {number} [createOrgDirectorManagerUserAge] 
         * @param {Date} [createOrgDirectorManagerUserBirthday] 
         * @param {string} [createOrgDirectorManagerUserNation] 
         * @param {string} [createOrgDirectorManagerUserPhone] 
         * @param {CardTypeEnum} [createOrgDirectorManagerUserCardType] 
         * @param {string} [createOrgDirectorManagerUserIdCardNum] 
         * @param {string} [createOrgDirectorManagerUserEmail] 
         * @param {string} [createOrgDirectorManagerUserAddress] 
         * @param {CultureLevelEnum} [createOrgDirectorManagerUserCultureLevel] 
         * @param {string} [createOrgDirectorManagerUserPoliticalOutlook] 
         * @param {string} [createOrgDirectorManagerUserCollege] 
         * @param {string} [createOrgDirectorManagerUserOfficePhone] 
         * @param {string} [createOrgDirectorManagerUserEmergencyContact] 
         * @param {string} [createOrgDirectorManagerUserEmergencyPhone] 
         * @param {string} [createOrgDirectorManagerUserEmergencyAddress] 
         * @param {string} [createOrgDirectorManagerUserIntroduction] 
         * @param {number} [createOrgDirectorManagerUserOrderNo] 
         * @param {StatusEnum} [createOrgDirectorManagerUserStatus] 
         * @param {string} [createOrgDirectorManagerUserRemark] 
         * @param {AccountTypeEnum} [createOrgDirectorManagerUserAccountType] 
         * @param {number} [createOrgDirectorManagerUserOrgId] 
         * @param {number} [createOrgDirectorManagerUserSysOrgPid] 
         * @param {string} [createOrgDirectorManagerUserSysOrgName] 
         * @param {string} [createOrgDirectorManagerUserSysOrgCode] 
         * @param {number} [createOrgDirectorManagerUserSysOrgLevel] 
         * @param {string} [createOrgDirectorManagerUserSysOrgType] 
         * @param {number} [createOrgDirectorManagerUserSysOrgDirectorId] 
         * @param {SysUser} [createOrgDirectorManagerUserSysOrgDirector] 
         * @param {number} [createOrgDirectorManagerUserSysOrgOrderNo] 
         * @param {StatusEnum} [createOrgDirectorManagerUserSysOrgStatus] 
         * @param {string} [createOrgDirectorManagerUserSysOrgRemark] 
         * @param {Array<SysOrg>} [createOrgDirectorManagerUserSysOrgChildren] 
         * @param {boolean} [createOrgDirectorManagerUserSysOrgDisabled] 
         * @param {number} [createOrgDirectorManagerUserSysOrgTenantId] 
         * @param {Date} [createOrgDirectorManagerUserSysOrgCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserSysOrgUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserSysOrgCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysOrgCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserSysOrgUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysOrgUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserSysOrgIsDelete] 
         * @param {number} [createOrgDirectorManagerUserSysOrgId] 
         * @param {number} [createOrgDirectorManagerUserManagerUserId] 
         * @param {SysUser} [createOrgDirectorManagerUserManagerUser] 
         * @param {number} [createOrgDirectorManagerUserPosId] 
         * @param {string} [createOrgDirectorManagerUserSysPosName] 
         * @param {string} [createOrgDirectorManagerUserSysPosCode] 
         * @param {number} [createOrgDirectorManagerUserSysPosOrderNo] 
         * @param {string} [createOrgDirectorManagerUserSysPosRemark] 
         * @param {StatusEnum} [createOrgDirectorManagerUserSysPosStatus] 
         * @param {number} [createOrgDirectorManagerUserSysPosTenantId] 
         * @param {Date} [createOrgDirectorManagerUserSysPosCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserSysPosUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserSysPosCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysPosCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserSysPosUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysPosUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserSysPosIsDelete] 
         * @param {number} [createOrgDirectorManagerUserSysPosId] 
         * @param {string} [createOrgDirectorManagerUserJobNum] 
         * @param {string} [createOrgDirectorManagerUserPosLevel] 
         * @param {string} [createOrgDirectorManagerUserPosTitle] 
         * @param {string} [createOrgDirectorManagerUserExpertise] 
         * @param {string} [createOrgDirectorManagerUserOfficeZone] 
         * @param {string} [createOrgDirectorManagerUserOffice] 
         * @param {Date} [createOrgDirectorManagerUserJoinDate] 
         * @param {string} [createOrgDirectorManagerUserLastLoginIp] 
         * @param {string} [createOrgDirectorManagerUserLastLoginAddress] 
         * @param {Date} [createOrgDirectorManagerUserLastLoginTime] 
         * @param {string} [createOrgDirectorManagerUserLastLoginDevice] 
         * @param {string} [createOrgDirectorManagerUserSignature] 
         * @param {number} [createOrgDirectorManagerUserTenantId] 
         * @param {Date} [createOrgDirectorManagerUserCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserIsDelete] 
         * @param {number} [createOrgDirectorManagerUserId] 
         * @param {number} [createOrgDirectorPosId] 
         * @param {string} [createOrgDirectorSysPosName] 
         * @param {string} [createOrgDirectorSysPosCode] 
         * @param {number} [createOrgDirectorSysPosOrderNo] 
         * @param {string} [createOrgDirectorSysPosRemark] 
         * @param {StatusEnum} [createOrgDirectorSysPosStatus] 
         * @param {number} [createOrgDirectorSysPosTenantId] 
         * @param {Date} [createOrgDirectorSysPosCreateTime] 
         * @param {Date} [createOrgDirectorSysPosUpdateTime] 
         * @param {number} [createOrgDirectorSysPosCreateUserId] 
         * @param {string} [createOrgDirectorSysPosCreateUserName] 
         * @param {number} [createOrgDirectorSysPosUpdateUserId] 
         * @param {string} [createOrgDirectorSysPosUpdateUserName] 
         * @param {boolean} [createOrgDirectorSysPosIsDelete] 
         * @param {number} [createOrgDirectorSysPosId] 
         * @param {string} [createOrgDirectorJobNum] 
         * @param {string} [createOrgDirectorPosLevel] 
         * @param {string} [createOrgDirectorPosTitle] 
         * @param {string} [createOrgDirectorExpertise] 
         * @param {string} [createOrgDirectorOfficeZone] 
         * @param {string} [createOrgDirectorOffice] 
         * @param {Date} [createOrgDirectorJoinDate] 
         * @param {string} [createOrgDirectorLastLoginIp] 
         * @param {string} [createOrgDirectorLastLoginAddress] 
         * @param {Date} [createOrgDirectorLastLoginTime] 
         * @param {string} [createOrgDirectorLastLoginDevice] 
         * @param {string} [createOrgDirectorSignature] 
         * @param {number} [createOrgDirectorTenantId] 
         * @param {Date} [createOrgDirectorCreateTime] 
         * @param {Date} [createOrgDirectorUpdateTime] 
         * @param {number} [createOrgDirectorCreateUserId] 
         * @param {string} [createOrgDirectorCreateUserName] 
         * @param {number} [createOrgDirectorUpdateUserId] 
         * @param {string} [createOrgDirectorUpdateUserName] 
         * @param {boolean} [createOrgDirectorIsDelete] 
         * @param {number} [createOrgDirectorId] 
         * @param {number} [createOrgOrderNo] 
         * @param {StatusEnum} [createOrgStatus] 
         * @param {string} [createOrgRemark] 
         * @param {Array<SysOrg>} [createOrgChildren] 
         * @param {boolean} [createOrgDisabled] 
         * @param {number} [createOrgTenantId] 
         * @param {Date} [createOrgCreateTime] 
         * @param {Date} [createOrgUpdateTime] 
         * @param {number} [createOrgCreateUserId] 
         * @param {string} [createOrgCreateUserName] 
         * @param {number} [createOrgUpdateUserId] 
         * @param {string} [createOrgUpdateUserName] 
         * @param {boolean} [createOrgIsDelete] 
         * @param {number} [createOrgId] 
         * @param {string} [createOrgName] 
         * @param {Date} [createTime] 
         * @param {Date} [updateTime] 
         * @param {number} [createUserId] 
         * @param {string} [createUserName] 
         * @param {number} [updateUserId] 
         * @param {string} [updateUserName] 
         * @param {boolean} [isDelete] 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadFilePostForm(file?: Blob, path?: string, savePath?: string, allowSuffix?: string, provider?: string, bucketName?: string, fileName?: string, suffix?: string, filePath?: string, sizeKb?: number, sizeInfo?: string, url?: string, fileMd5?: string, relationName?: string, relationId?: number, belongId?: number, fileType?: string, isPublic?: boolean, tenantId?: number, createOrgId2?: number, createOrgPid?: number, createOrgName2?: string, createOrgCode?: string, createOrgLevel?: number, createOrgType?: string, createOrgDirectorId2?: number, createOrgDirectorAccount?: string, createOrgDirectorPassword?: string, createOrgDirectorRealName?: string, createOrgDirectorNickName?: string, createOrgDirectorAvatar?: string, createOrgDirectorSex?: GenderEnum, createOrgDirectorAge?: number, createOrgDirectorBirthday?: Date, createOrgDirectorNation?: string, createOrgDirectorPhone?: string, createOrgDirectorCardType?: CardTypeEnum, createOrgDirectorIdCardNum?: string, createOrgDirectorEmail?: string, createOrgDirectorAddress?: string, createOrgDirectorCultureLevel?: CultureLevelEnum, createOrgDirectorPoliticalOutlook?: string, createOrgDirectorCollege?: string, createOrgDirectorOfficePhone?: string, createOrgDirectorEmergencyContact?: string, createOrgDirectorEmergencyPhone?: string, createOrgDirectorEmergencyAddress?: string, createOrgDirectorIntroduction?: string, createOrgDirectorOrderNo?: number, createOrgDirectorStatus?: StatusEnum, createOrgDirectorRemark?: string, createOrgDirectorAccountType?: AccountTypeEnum, createOrgDirectorOrgId?: number, createOrgDirectorSysOrgPid?: number, createOrgDirectorSysOrgName?: string, createOrgDirectorSysOrgCode?: string, createOrgDirectorSysOrgLevel?: number, createOrgDirectorSysOrgType?: string, createOrgDirectorSysOrgDirectorId?: number, createOrgDirectorSysOrgDirector?: SysUser, createOrgDirectorSysOrgOrderNo?: number, createOrgDirectorSysOrgStatus?: StatusEnum, createOrgDirectorSysOrgRemark?: string, createOrgDirectorSysOrgChildren?: Array<SysOrg>, createOrgDirectorSysOrgDisabled?: boolean, createOrgDirectorSysOrgTenantId?: number, createOrgDirectorSysOrgCreateTime?: Date, createOrgDirectorSysOrgUpdateTime?: Date, createOrgDirectorSysOrgCreateUserId?: number, createOrgDirectorSysOrgCreateUserName?: string, createOrgDirectorSysOrgUpdateUserId?: number, createOrgDirectorSysOrgUpdateUserName?: string, createOrgDirectorSysOrgIsDelete?: boolean, createOrgDirectorSysOrgId?: number, createOrgDirectorManagerUserId2?: number, createOrgDirectorManagerUserAccount?: string, createOrgDirectorManagerUserPassword?: string, createOrgDirectorManagerUserRealName?: string, createOrgDirectorManagerUserNickName?: string, createOrgDirectorManagerUserAvatar?: string, createOrgDirectorManagerUserSex?: GenderEnum, createOrgDirectorManagerUserAge?: number, createOrgDirectorManagerUserBirthday?: Date, createOrgDirectorManagerUserNation?: string, createOrgDirectorManagerUserPhone?: string, createOrgDirectorManagerUserCardType?: CardTypeEnum, createOrgDirectorManagerUserIdCardNum?: string, createOrgDirectorManagerUserEmail?: string, createOrgDirectorManagerUserAddress?: string, createOrgDirectorManagerUserCultureLevel?: CultureLevelEnum, createOrgDirectorManagerUserPoliticalOutlook?: string, createOrgDirectorManagerUserCollege?: string, createOrgDirectorManagerUserOfficePhone?: string, createOrgDirectorManagerUserEmergencyContact?: string, createOrgDirectorManagerUserEmergencyPhone?: string, createOrgDirectorManagerUserEmergencyAddress?: string, createOrgDirectorManagerUserIntroduction?: string, createOrgDirectorManagerUserOrderNo?: number, createOrgDirectorManagerUserStatus?: StatusEnum, createOrgDirectorManagerUserRemark?: string, createOrgDirectorManagerUserAccountType?: AccountTypeEnum, createOrgDirectorManagerUserOrgId?: number, createOrgDirectorManagerUserSysOrgPid?: number, createOrgDirectorManagerUserSysOrgName?: string, createOrgDirectorManagerUserSysOrgCode?: string, createOrgDirectorManagerUserSysOrgLevel?: number, createOrgDirectorManagerUserSysOrgType?: string, createOrgDirectorManagerUserSysOrgDirectorId?: number, createOrgDirectorManagerUserSysOrgDirector?: SysUser, createOrgDirectorManagerUserSysOrgOrderNo?: number, createOrgDirectorManagerUserSysOrgStatus?: StatusEnum, createOrgDirectorManagerUserSysOrgRemark?: string, createOrgDirectorManagerUserSysOrgChildren?: Array<SysOrg>, createOrgDirectorManagerUserSysOrgDisabled?: boolean, createOrgDirectorManagerUserSysOrgTenantId?: number, createOrgDirectorManagerUserSysOrgCreateTime?: Date, createOrgDirectorManagerUserSysOrgUpdateTime?: Date, createOrgDirectorManagerUserSysOrgCreateUserId?: number, createOrgDirectorManagerUserSysOrgCreateUserName?: string, createOrgDirectorManagerUserSysOrgUpdateUserId?: number, createOrgDirectorManagerUserSysOrgUpdateUserName?: string, createOrgDirectorManagerUserSysOrgIsDelete?: boolean, createOrgDirectorManagerUserSysOrgId?: number, createOrgDirectorManagerUserManagerUserId?: number, createOrgDirectorManagerUserManagerUser?: SysUser, createOrgDirectorManagerUserPosId?: number, createOrgDirectorManagerUserSysPosName?: string, createOrgDirectorManagerUserSysPosCode?: string, createOrgDirectorManagerUserSysPosOrderNo?: number, createOrgDirectorManagerUserSysPosRemark?: string, createOrgDirectorManagerUserSysPosStatus?: StatusEnum, createOrgDirectorManagerUserSysPosTenantId?: number, createOrgDirectorManagerUserSysPosCreateTime?: Date, createOrgDirectorManagerUserSysPosUpdateTime?: Date, createOrgDirectorManagerUserSysPosCreateUserId?: number, createOrgDirectorManagerUserSysPosCreateUserName?: string, createOrgDirectorManagerUserSysPosUpdateUserId?: number, createOrgDirectorManagerUserSysPosUpdateUserName?: string, createOrgDirectorManagerUserSysPosIsDelete?: boolean, createOrgDirectorManagerUserSysPosId?: number, createOrgDirectorManagerUserJobNum?: string, createOrgDirectorManagerUserPosLevel?: string, createOrgDirectorManagerUserPosTitle?: string, createOrgDirectorManagerUserExpertise?: string, createOrgDirectorManagerUserOfficeZone?: string, createOrgDirectorManagerUserOffice?: string, createOrgDirectorManagerUserJoinDate?: Date, createOrgDirectorManagerUserLastLoginIp?: string, createOrgDirectorManagerUserLastLoginAddress?: string, createOrgDirectorManagerUserLastLoginTime?: Date, createOrgDirectorManagerUserLastLoginDevice?: string, createOrgDirectorManagerUserSignature?: string, createOrgDirectorManagerUserTenantId?: number, createOrgDirectorManagerUserCreateTime?: Date, createOrgDirectorManagerUserUpdateTime?: Date, createOrgDirectorManagerUserCreateUserId?: number, createOrgDirectorManagerUserCreateUserName?: string, createOrgDirectorManagerUserUpdateUserId?: number, createOrgDirectorManagerUserUpdateUserName?: string, createOrgDirectorManagerUserIsDelete?: boolean, createOrgDirectorManagerUserId?: number, createOrgDirectorPosId?: number, createOrgDirectorSysPosName?: string, createOrgDirectorSysPosCode?: string, createOrgDirectorSysPosOrderNo?: number, createOrgDirectorSysPosRemark?: string, createOrgDirectorSysPosStatus?: StatusEnum, createOrgDirectorSysPosTenantId?: number, createOrgDirectorSysPosCreateTime?: Date, createOrgDirectorSysPosUpdateTime?: Date, createOrgDirectorSysPosCreateUserId?: number, createOrgDirectorSysPosCreateUserName?: string, createOrgDirectorSysPosUpdateUserId?: number, createOrgDirectorSysPosUpdateUserName?: string, createOrgDirectorSysPosIsDelete?: boolean, createOrgDirectorSysPosId?: number, createOrgDirectorJobNum?: string, createOrgDirectorPosLevel?: string, createOrgDirectorPosTitle?: string, createOrgDirectorExpertise?: string, createOrgDirectorOfficeZone?: string, createOrgDirectorOffice?: string, createOrgDirectorJoinDate?: Date, createOrgDirectorLastLoginIp?: string, createOrgDirectorLastLoginAddress?: string, createOrgDirectorLastLoginTime?: Date, createOrgDirectorLastLoginDevice?: string, createOrgDirectorSignature?: string, createOrgDirectorTenantId?: number, createOrgDirectorCreateTime?: Date, createOrgDirectorUpdateTime?: Date, createOrgDirectorCreateUserId?: number, createOrgDirectorCreateUserName?: string, createOrgDirectorUpdateUserId?: number, createOrgDirectorUpdateUserName?: string, createOrgDirectorIsDelete?: boolean, createOrgDirectorId?: number, createOrgOrderNo?: number, createOrgStatus?: StatusEnum, createOrgRemark?: string, createOrgChildren?: Array<SysOrg>, createOrgDisabled?: boolean, createOrgTenantId?: number, createOrgCreateTime?: Date, createOrgUpdateTime?: Date, createOrgCreateUserId?: number, createOrgCreateUserName?: string, createOrgUpdateUserId?: number, createOrgUpdateUserName?: string, createOrgIsDelete?: boolean, createOrgId?: number, createOrgName?: string, createTime?: Date, updateTime?: Date, createUserId?: number, createUserName?: string, updateUserId?: number, updateUserName?: string, isDelete?: boolean, id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSysFile>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileUploadFilePostForm(file, path, savePath, allowSuffix, provider, bucketName, fileName, suffix, filePath, sizeKb, sizeInfo, url, fileMd5, relationName, relationId, belongId, fileType, isPublic, tenantId, createOrgId2, createOrgPid, createOrgName2, createOrgCode, createOrgLevel, createOrgType, createOrgDirectorId2, createOrgDirectorAccount, createOrgDirectorPassword, createOrgDirectorRealName, createOrgDirectorNickName, createOrgDirectorAvatar, createOrgDirectorSex, createOrgDirectorAge, createOrgDirectorBirthday, createOrgDirectorNation, createOrgDirectorPhone, createOrgDirectorCardType, createOrgDirectorIdCardNum, createOrgDirectorEmail, createOrgDirectorAddress, createOrgDirectorCultureLevel, createOrgDirectorPoliticalOutlook, createOrgDirectorCollege, createOrgDirectorOfficePhone, createOrgDirectorEmergencyContact, createOrgDirectorEmergencyPhone, createOrgDirectorEmergencyAddress, createOrgDirectorIntroduction, createOrgDirectorOrderNo, createOrgDirectorStatus, createOrgDirectorRemark, createOrgDirectorAccountType, createOrgDirectorOrgId, createOrgDirectorSysOrgPid, createOrgDirectorSysOrgName, createOrgDirectorSysOrgCode, createOrgDirectorSysOrgLevel, createOrgDirectorSysOrgType, createOrgDirectorSysOrgDirectorId, createOrgDirectorSysOrgDirector, createOrgDirectorSysOrgOrderNo, createOrgDirectorSysOrgStatus, createOrgDirectorSysOrgRemark, createOrgDirectorSysOrgChildren, createOrgDirectorSysOrgDisabled, createOrgDirectorSysOrgTenantId, createOrgDirectorSysOrgCreateTime, createOrgDirectorSysOrgUpdateTime, createOrgDirectorSysOrgCreateUserId, createOrgDirectorSysOrgCreateUserName, createOrgDirectorSysOrgUpdateUserId, createOrgDirectorSysOrgUpdateUserName, createOrgDirectorSysOrgIsDelete, createOrgDirectorSysOrgId, createOrgDirectorManagerUserId2, createOrgDirectorManagerUserAccount, createOrgDirectorManagerUserPassword, createOrgDirectorManagerUserRealName, createOrgDirectorManagerUserNickName, createOrgDirectorManagerUserAvatar, createOrgDirectorManagerUserSex, createOrgDirectorManagerUserAge, createOrgDirectorManagerUserBirthday, createOrgDirectorManagerUserNation, createOrgDirectorManagerUserPhone, createOrgDirectorManagerUserCardType, createOrgDirectorManagerUserIdCardNum, createOrgDirectorManagerUserEmail, createOrgDirectorManagerUserAddress, createOrgDirectorManagerUserCultureLevel, createOrgDirectorManagerUserPoliticalOutlook, createOrgDirectorManagerUserCollege, createOrgDirectorManagerUserOfficePhone, createOrgDirectorManagerUserEmergencyContact, createOrgDirectorManagerUserEmergencyPhone, createOrgDirectorManagerUserEmergencyAddress, createOrgDirectorManagerUserIntroduction, createOrgDirectorManagerUserOrderNo, createOrgDirectorManagerUserStatus, createOrgDirectorManagerUserRemark, createOrgDirectorManagerUserAccountType, createOrgDirectorManagerUserOrgId, createOrgDirectorManagerUserSysOrgPid, createOrgDirectorManagerUserSysOrgName, createOrgDirectorManagerUserSysOrgCode, createOrgDirectorManagerUserSysOrgLevel, createOrgDirectorManagerUserSysOrgType, createOrgDirectorManagerUserSysOrgDirectorId, createOrgDirectorManagerUserSysOrgDirector, createOrgDirectorManagerUserSysOrgOrderNo, createOrgDirectorManagerUserSysOrgStatus, createOrgDirectorManagerUserSysOrgRemark, createOrgDirectorManagerUserSysOrgChildren, createOrgDirectorManagerUserSysOrgDisabled, createOrgDirectorManagerUserSysOrgTenantId, createOrgDirectorManagerUserSysOrgCreateTime, createOrgDirectorManagerUserSysOrgUpdateTime, createOrgDirectorManagerUserSysOrgCreateUserId, createOrgDirectorManagerUserSysOrgCreateUserName, createOrgDirectorManagerUserSysOrgUpdateUserId, createOrgDirectorManagerUserSysOrgUpdateUserName, createOrgDirectorManagerUserSysOrgIsDelete, createOrgDirectorManagerUserSysOrgId, createOrgDirectorManagerUserManagerUserId, createOrgDirectorManagerUserManagerUser, createOrgDirectorManagerUserPosId, createOrgDirectorManagerUserSysPosName, createOrgDirectorManagerUserSysPosCode, createOrgDirectorManagerUserSysPosOrderNo, createOrgDirectorManagerUserSysPosRemark, createOrgDirectorManagerUserSysPosStatus, createOrgDirectorManagerUserSysPosTenantId, createOrgDirectorManagerUserSysPosCreateTime, createOrgDirectorManagerUserSysPosUpdateTime, createOrgDirectorManagerUserSysPosCreateUserId, createOrgDirectorManagerUserSysPosCreateUserName, createOrgDirectorManagerUserSysPosUpdateUserId, createOrgDirectorManagerUserSysPosUpdateUserName, createOrgDirectorManagerUserSysPosIsDelete, createOrgDirectorManagerUserSysPosId, createOrgDirectorManagerUserJobNum, createOrgDirectorManagerUserPosLevel, createOrgDirectorManagerUserPosTitle, createOrgDirectorManagerUserExpertise, createOrgDirectorManagerUserOfficeZone, createOrgDirectorManagerUserOffice, createOrgDirectorManagerUserJoinDate, createOrgDirectorManagerUserLastLoginIp, createOrgDirectorManagerUserLastLoginAddress, createOrgDirectorManagerUserLastLoginTime, createOrgDirectorManagerUserLastLoginDevice, createOrgDirectorManagerUserSignature, createOrgDirectorManagerUserTenantId, createOrgDirectorManagerUserCreateTime, createOrgDirectorManagerUserUpdateTime, createOrgDirectorManagerUserCreateUserId, createOrgDirectorManagerUserCreateUserName, createOrgDirectorManagerUserUpdateUserId, createOrgDirectorManagerUserUpdateUserName, createOrgDirectorManagerUserIsDelete, createOrgDirectorManagerUserId, createOrgDirectorPosId, createOrgDirectorSysPosName, createOrgDirectorSysPosCode, createOrgDirectorSysPosOrderNo, createOrgDirectorSysPosRemark, createOrgDirectorSysPosStatus, createOrgDirectorSysPosTenantId, createOrgDirectorSysPosCreateTime, createOrgDirectorSysPosUpdateTime, createOrgDirectorSysPosCreateUserId, createOrgDirectorSysPosCreateUserName, createOrgDirectorSysPosUpdateUserId, createOrgDirectorSysPosUpdateUserName, createOrgDirectorSysPosIsDelete, createOrgDirectorSysPosId, createOrgDirectorJobNum, createOrgDirectorPosLevel, createOrgDirectorPosTitle, createOrgDirectorExpertise, createOrgDirectorOfficeZone, createOrgDirectorOffice, createOrgDirectorJoinDate, createOrgDirectorLastLoginIp, createOrgDirectorLastLoginAddress, createOrgDirectorLastLoginTime, createOrgDirectorLastLoginDevice, createOrgDirectorSignature, createOrgDirectorTenantId, createOrgDirectorCreateTime, createOrgDirectorUpdateTime, createOrgDirectorCreateUserId, createOrgDirectorCreateUserName, createOrgDirectorUpdateUserId, createOrgDirectorUpdateUserName, createOrgDirectorIsDelete, createOrgDirectorId, createOrgOrderNo, createOrgStatus, createOrgRemark, createOrgChildren, createOrgDisabled, createOrgTenantId, createOrgCreateTime, createOrgUpdateTime, createOrgCreateUserId, createOrgCreateUserName, createOrgUpdateUserId, createOrgUpdateUserName, createOrgIsDelete, createOrgId, createOrgName, createTime, updateTime, createUserId, createUserName, updateUserId, updateUserName, isDelete, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传多文件 🔖
         * @param {Array<Blob>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadFilesPostForm(files?: Array<Blob>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListSysFile>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileUploadFilesPostForm(files, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传电子签名 🔖
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadSignaturePostForm(file?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSysFile>>> {
            const localVarAxiosArgs = await SysFileApiAxiosParamCreator(configuration).apiSysFileUploadSignaturePostForm(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SysFileApi - factory interface
 * @export
 */
export const SysFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 删除文件 🔖
         * @param {DeleteFileInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileDeletePost(body?: DeleteFileInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysFileApiFp(configuration).apiSysFileDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 下载指定文件Base64格式 🔖
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileDownloadFileBase64Post(body?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultString>> {
            return SysFileApiFp(configuration).apiSysFileDownloadFileBase64Post(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据文件Id或Url下载 🔖
         * @param {SysFile} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileDownloadFilePost(body?: SysFile, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultIActionResult>> {
            return SysFileApiFp(configuration).apiSysFileDownloadFilePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取文件 🔖
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileFileGet(id?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSysFile>> {
            return SysFileApiFp(configuration).apiSysFileFileGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取文件分页列表 🔖
         * @param {PageFileInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFilePagePost(body?: PageFileInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListSysFile>> {
            return SysFileApiFp(configuration).apiSysFilePagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 文件预览 🔖
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFilePreviewIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultIActionResult>> {
            return SysFileApiFp(configuration).apiSysFilePreviewIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据关联查询附件
         * @param {string} [relationName] 关联对象名称
         * @param {number} [relationId] 关联对象Id
         * @param {string} [fileTypes] 文件类型：多个以\&quot;,\&quot;分割
         * @param {number} [belongId] 所属Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileRelationFilesGet(relationName?: string, relationId?: number, fileTypes?: string, belongId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListSysFile>> {
            return SysFileApiFp(configuration).apiSysFileRelationFilesGet(relationName, relationId, fileTypes, belongId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新文件 🔖
         * @param {SysFile} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUpdatePost(body?: SysFile, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SysFileApiFp(configuration).apiSysFileUpdatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传头像 🔖
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadAvatarPostForm(file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSysFile>> {
            return SysFileApiFp(configuration).apiSysFileUploadAvatarPostForm(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传文件Base64 🔖
         * @param {UploadFileFromBase64Input} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadFileFromBase64Post(body?: UploadFileFromBase64Input, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSysFile>> {
            return SysFileApiFp(configuration).apiSysFileUploadFileFromBase64Post(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传文件 🔖
         * @param {Blob} [file] 
         * @param {string} [path] 
         * @param {string} [savePath] 
         * @param {string} [allowSuffix] 
         * @param {string} [provider] 
         * @param {string} [bucketName] 
         * @param {string} [fileName] 
         * @param {string} [suffix] 
         * @param {string} [filePath] 
         * @param {number} [sizeKb] 
         * @param {string} [sizeInfo] 
         * @param {string} [url] 
         * @param {string} [fileMd5] 
         * @param {string} [relationName] 
         * @param {number} [relationId] 
         * @param {number} [belongId] 
         * @param {string} [fileType] 
         * @param {boolean} [isPublic] 
         * @param {number} [tenantId] 
         * @param {number} [createOrgId2] 
         * @param {number} [createOrgPid] 
         * @param {string} [createOrgName2] 
         * @param {string} [createOrgCode] 
         * @param {number} [createOrgLevel] 
         * @param {string} [createOrgType] 
         * @param {number} [createOrgDirectorId2] 
         * @param {string} [createOrgDirectorAccount] 
         * @param {string} [createOrgDirectorPassword] 
         * @param {string} [createOrgDirectorRealName] 
         * @param {string} [createOrgDirectorNickName] 
         * @param {string} [createOrgDirectorAvatar] 
         * @param {GenderEnum} [createOrgDirectorSex] 
         * @param {number} [createOrgDirectorAge] 
         * @param {Date} [createOrgDirectorBirthday] 
         * @param {string} [createOrgDirectorNation] 
         * @param {string} [createOrgDirectorPhone] 
         * @param {CardTypeEnum} [createOrgDirectorCardType] 
         * @param {string} [createOrgDirectorIdCardNum] 
         * @param {string} [createOrgDirectorEmail] 
         * @param {string} [createOrgDirectorAddress] 
         * @param {CultureLevelEnum} [createOrgDirectorCultureLevel] 
         * @param {string} [createOrgDirectorPoliticalOutlook] 
         * @param {string} [createOrgDirectorCollege] 
         * @param {string} [createOrgDirectorOfficePhone] 
         * @param {string} [createOrgDirectorEmergencyContact] 
         * @param {string} [createOrgDirectorEmergencyPhone] 
         * @param {string} [createOrgDirectorEmergencyAddress] 
         * @param {string} [createOrgDirectorIntroduction] 
         * @param {number} [createOrgDirectorOrderNo] 
         * @param {StatusEnum} [createOrgDirectorStatus] 
         * @param {string} [createOrgDirectorRemark] 
         * @param {AccountTypeEnum} [createOrgDirectorAccountType] 
         * @param {number} [createOrgDirectorOrgId] 
         * @param {number} [createOrgDirectorSysOrgPid] 
         * @param {string} [createOrgDirectorSysOrgName] 
         * @param {string} [createOrgDirectorSysOrgCode] 
         * @param {number} [createOrgDirectorSysOrgLevel] 
         * @param {string} [createOrgDirectorSysOrgType] 
         * @param {number} [createOrgDirectorSysOrgDirectorId] 
         * @param {SysUser} [createOrgDirectorSysOrgDirector] 
         * @param {number} [createOrgDirectorSysOrgOrderNo] 
         * @param {StatusEnum} [createOrgDirectorSysOrgStatus] 
         * @param {string} [createOrgDirectorSysOrgRemark] 
         * @param {Array<SysOrg>} [createOrgDirectorSysOrgChildren] 
         * @param {boolean} [createOrgDirectorSysOrgDisabled] 
         * @param {number} [createOrgDirectorSysOrgTenantId] 
         * @param {Date} [createOrgDirectorSysOrgCreateTime] 
         * @param {Date} [createOrgDirectorSysOrgUpdateTime] 
         * @param {number} [createOrgDirectorSysOrgCreateUserId] 
         * @param {string} [createOrgDirectorSysOrgCreateUserName] 
         * @param {number} [createOrgDirectorSysOrgUpdateUserId] 
         * @param {string} [createOrgDirectorSysOrgUpdateUserName] 
         * @param {boolean} [createOrgDirectorSysOrgIsDelete] 
         * @param {number} [createOrgDirectorSysOrgId] 
         * @param {number} [createOrgDirectorManagerUserId2] 
         * @param {string} [createOrgDirectorManagerUserAccount] 
         * @param {string} [createOrgDirectorManagerUserPassword] 
         * @param {string} [createOrgDirectorManagerUserRealName] 
         * @param {string} [createOrgDirectorManagerUserNickName] 
         * @param {string} [createOrgDirectorManagerUserAvatar] 
         * @param {GenderEnum} [createOrgDirectorManagerUserSex] 
         * @param {number} [createOrgDirectorManagerUserAge] 
         * @param {Date} [createOrgDirectorManagerUserBirthday] 
         * @param {string} [createOrgDirectorManagerUserNation] 
         * @param {string} [createOrgDirectorManagerUserPhone] 
         * @param {CardTypeEnum} [createOrgDirectorManagerUserCardType] 
         * @param {string} [createOrgDirectorManagerUserIdCardNum] 
         * @param {string} [createOrgDirectorManagerUserEmail] 
         * @param {string} [createOrgDirectorManagerUserAddress] 
         * @param {CultureLevelEnum} [createOrgDirectorManagerUserCultureLevel] 
         * @param {string} [createOrgDirectorManagerUserPoliticalOutlook] 
         * @param {string} [createOrgDirectorManagerUserCollege] 
         * @param {string} [createOrgDirectorManagerUserOfficePhone] 
         * @param {string} [createOrgDirectorManagerUserEmergencyContact] 
         * @param {string} [createOrgDirectorManagerUserEmergencyPhone] 
         * @param {string} [createOrgDirectorManagerUserEmergencyAddress] 
         * @param {string} [createOrgDirectorManagerUserIntroduction] 
         * @param {number} [createOrgDirectorManagerUserOrderNo] 
         * @param {StatusEnum} [createOrgDirectorManagerUserStatus] 
         * @param {string} [createOrgDirectorManagerUserRemark] 
         * @param {AccountTypeEnum} [createOrgDirectorManagerUserAccountType] 
         * @param {number} [createOrgDirectorManagerUserOrgId] 
         * @param {number} [createOrgDirectorManagerUserSysOrgPid] 
         * @param {string} [createOrgDirectorManagerUserSysOrgName] 
         * @param {string} [createOrgDirectorManagerUserSysOrgCode] 
         * @param {number} [createOrgDirectorManagerUserSysOrgLevel] 
         * @param {string} [createOrgDirectorManagerUserSysOrgType] 
         * @param {number} [createOrgDirectorManagerUserSysOrgDirectorId] 
         * @param {SysUser} [createOrgDirectorManagerUserSysOrgDirector] 
         * @param {number} [createOrgDirectorManagerUserSysOrgOrderNo] 
         * @param {StatusEnum} [createOrgDirectorManagerUserSysOrgStatus] 
         * @param {string} [createOrgDirectorManagerUserSysOrgRemark] 
         * @param {Array<SysOrg>} [createOrgDirectorManagerUserSysOrgChildren] 
         * @param {boolean} [createOrgDirectorManagerUserSysOrgDisabled] 
         * @param {number} [createOrgDirectorManagerUserSysOrgTenantId] 
         * @param {Date} [createOrgDirectorManagerUserSysOrgCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserSysOrgUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserSysOrgCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysOrgCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserSysOrgUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysOrgUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserSysOrgIsDelete] 
         * @param {number} [createOrgDirectorManagerUserSysOrgId] 
         * @param {number} [createOrgDirectorManagerUserManagerUserId] 
         * @param {SysUser} [createOrgDirectorManagerUserManagerUser] 
         * @param {number} [createOrgDirectorManagerUserPosId] 
         * @param {string} [createOrgDirectorManagerUserSysPosName] 
         * @param {string} [createOrgDirectorManagerUserSysPosCode] 
         * @param {number} [createOrgDirectorManagerUserSysPosOrderNo] 
         * @param {string} [createOrgDirectorManagerUserSysPosRemark] 
         * @param {StatusEnum} [createOrgDirectorManagerUserSysPosStatus] 
         * @param {number} [createOrgDirectorManagerUserSysPosTenantId] 
         * @param {Date} [createOrgDirectorManagerUserSysPosCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserSysPosUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserSysPosCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysPosCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserSysPosUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserSysPosUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserSysPosIsDelete] 
         * @param {number} [createOrgDirectorManagerUserSysPosId] 
         * @param {string} [createOrgDirectorManagerUserJobNum] 
         * @param {string} [createOrgDirectorManagerUserPosLevel] 
         * @param {string} [createOrgDirectorManagerUserPosTitle] 
         * @param {string} [createOrgDirectorManagerUserExpertise] 
         * @param {string} [createOrgDirectorManagerUserOfficeZone] 
         * @param {string} [createOrgDirectorManagerUserOffice] 
         * @param {Date} [createOrgDirectorManagerUserJoinDate] 
         * @param {string} [createOrgDirectorManagerUserLastLoginIp] 
         * @param {string} [createOrgDirectorManagerUserLastLoginAddress] 
         * @param {Date} [createOrgDirectorManagerUserLastLoginTime] 
         * @param {string} [createOrgDirectorManagerUserLastLoginDevice] 
         * @param {string} [createOrgDirectorManagerUserSignature] 
         * @param {number} [createOrgDirectorManagerUserTenantId] 
         * @param {Date} [createOrgDirectorManagerUserCreateTime] 
         * @param {Date} [createOrgDirectorManagerUserUpdateTime] 
         * @param {number} [createOrgDirectorManagerUserCreateUserId] 
         * @param {string} [createOrgDirectorManagerUserCreateUserName] 
         * @param {number} [createOrgDirectorManagerUserUpdateUserId] 
         * @param {string} [createOrgDirectorManagerUserUpdateUserName] 
         * @param {boolean} [createOrgDirectorManagerUserIsDelete] 
         * @param {number} [createOrgDirectorManagerUserId] 
         * @param {number} [createOrgDirectorPosId] 
         * @param {string} [createOrgDirectorSysPosName] 
         * @param {string} [createOrgDirectorSysPosCode] 
         * @param {number} [createOrgDirectorSysPosOrderNo] 
         * @param {string} [createOrgDirectorSysPosRemark] 
         * @param {StatusEnum} [createOrgDirectorSysPosStatus] 
         * @param {number} [createOrgDirectorSysPosTenantId] 
         * @param {Date} [createOrgDirectorSysPosCreateTime] 
         * @param {Date} [createOrgDirectorSysPosUpdateTime] 
         * @param {number} [createOrgDirectorSysPosCreateUserId] 
         * @param {string} [createOrgDirectorSysPosCreateUserName] 
         * @param {number} [createOrgDirectorSysPosUpdateUserId] 
         * @param {string} [createOrgDirectorSysPosUpdateUserName] 
         * @param {boolean} [createOrgDirectorSysPosIsDelete] 
         * @param {number} [createOrgDirectorSysPosId] 
         * @param {string} [createOrgDirectorJobNum] 
         * @param {string} [createOrgDirectorPosLevel] 
         * @param {string} [createOrgDirectorPosTitle] 
         * @param {string} [createOrgDirectorExpertise] 
         * @param {string} [createOrgDirectorOfficeZone] 
         * @param {string} [createOrgDirectorOffice] 
         * @param {Date} [createOrgDirectorJoinDate] 
         * @param {string} [createOrgDirectorLastLoginIp] 
         * @param {string} [createOrgDirectorLastLoginAddress] 
         * @param {Date} [createOrgDirectorLastLoginTime] 
         * @param {string} [createOrgDirectorLastLoginDevice] 
         * @param {string} [createOrgDirectorSignature] 
         * @param {number} [createOrgDirectorTenantId] 
         * @param {Date} [createOrgDirectorCreateTime] 
         * @param {Date} [createOrgDirectorUpdateTime] 
         * @param {number} [createOrgDirectorCreateUserId] 
         * @param {string} [createOrgDirectorCreateUserName] 
         * @param {number} [createOrgDirectorUpdateUserId] 
         * @param {string} [createOrgDirectorUpdateUserName] 
         * @param {boolean} [createOrgDirectorIsDelete] 
         * @param {number} [createOrgDirectorId] 
         * @param {number} [createOrgOrderNo] 
         * @param {StatusEnum} [createOrgStatus] 
         * @param {string} [createOrgRemark] 
         * @param {Array<SysOrg>} [createOrgChildren] 
         * @param {boolean} [createOrgDisabled] 
         * @param {number} [createOrgTenantId] 
         * @param {Date} [createOrgCreateTime] 
         * @param {Date} [createOrgUpdateTime] 
         * @param {number} [createOrgCreateUserId] 
         * @param {string} [createOrgCreateUserName] 
         * @param {number} [createOrgUpdateUserId] 
         * @param {string} [createOrgUpdateUserName] 
         * @param {boolean} [createOrgIsDelete] 
         * @param {number} [createOrgId] 
         * @param {string} [createOrgName] 
         * @param {Date} [createTime] 
         * @param {Date} [updateTime] 
         * @param {number} [createUserId] 
         * @param {string} [createUserName] 
         * @param {number} [updateUserId] 
         * @param {string} [updateUserName] 
         * @param {boolean} [isDelete] 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadFilePostForm(file?: Blob, path?: string, savePath?: string, allowSuffix?: string, provider?: string, bucketName?: string, fileName?: string, suffix?: string, filePath?: string, sizeKb?: number, sizeInfo?: string, url?: string, fileMd5?: string, relationName?: string, relationId?: number, belongId?: number, fileType?: string, isPublic?: boolean, tenantId?: number, createOrgId2?: number, createOrgPid?: number, createOrgName2?: string, createOrgCode?: string, createOrgLevel?: number, createOrgType?: string, createOrgDirectorId2?: number, createOrgDirectorAccount?: string, createOrgDirectorPassword?: string, createOrgDirectorRealName?: string, createOrgDirectorNickName?: string, createOrgDirectorAvatar?: string, createOrgDirectorSex?: GenderEnum, createOrgDirectorAge?: number, createOrgDirectorBirthday?: Date, createOrgDirectorNation?: string, createOrgDirectorPhone?: string, createOrgDirectorCardType?: CardTypeEnum, createOrgDirectorIdCardNum?: string, createOrgDirectorEmail?: string, createOrgDirectorAddress?: string, createOrgDirectorCultureLevel?: CultureLevelEnum, createOrgDirectorPoliticalOutlook?: string, createOrgDirectorCollege?: string, createOrgDirectorOfficePhone?: string, createOrgDirectorEmergencyContact?: string, createOrgDirectorEmergencyPhone?: string, createOrgDirectorEmergencyAddress?: string, createOrgDirectorIntroduction?: string, createOrgDirectorOrderNo?: number, createOrgDirectorStatus?: StatusEnum, createOrgDirectorRemark?: string, createOrgDirectorAccountType?: AccountTypeEnum, createOrgDirectorOrgId?: number, createOrgDirectorSysOrgPid?: number, createOrgDirectorSysOrgName?: string, createOrgDirectorSysOrgCode?: string, createOrgDirectorSysOrgLevel?: number, createOrgDirectorSysOrgType?: string, createOrgDirectorSysOrgDirectorId?: number, createOrgDirectorSysOrgDirector?: SysUser, createOrgDirectorSysOrgOrderNo?: number, createOrgDirectorSysOrgStatus?: StatusEnum, createOrgDirectorSysOrgRemark?: string, createOrgDirectorSysOrgChildren?: Array<SysOrg>, createOrgDirectorSysOrgDisabled?: boolean, createOrgDirectorSysOrgTenantId?: number, createOrgDirectorSysOrgCreateTime?: Date, createOrgDirectorSysOrgUpdateTime?: Date, createOrgDirectorSysOrgCreateUserId?: number, createOrgDirectorSysOrgCreateUserName?: string, createOrgDirectorSysOrgUpdateUserId?: number, createOrgDirectorSysOrgUpdateUserName?: string, createOrgDirectorSysOrgIsDelete?: boolean, createOrgDirectorSysOrgId?: number, createOrgDirectorManagerUserId2?: number, createOrgDirectorManagerUserAccount?: string, createOrgDirectorManagerUserPassword?: string, createOrgDirectorManagerUserRealName?: string, createOrgDirectorManagerUserNickName?: string, createOrgDirectorManagerUserAvatar?: string, createOrgDirectorManagerUserSex?: GenderEnum, createOrgDirectorManagerUserAge?: number, createOrgDirectorManagerUserBirthday?: Date, createOrgDirectorManagerUserNation?: string, createOrgDirectorManagerUserPhone?: string, createOrgDirectorManagerUserCardType?: CardTypeEnum, createOrgDirectorManagerUserIdCardNum?: string, createOrgDirectorManagerUserEmail?: string, createOrgDirectorManagerUserAddress?: string, createOrgDirectorManagerUserCultureLevel?: CultureLevelEnum, createOrgDirectorManagerUserPoliticalOutlook?: string, createOrgDirectorManagerUserCollege?: string, createOrgDirectorManagerUserOfficePhone?: string, createOrgDirectorManagerUserEmergencyContact?: string, createOrgDirectorManagerUserEmergencyPhone?: string, createOrgDirectorManagerUserEmergencyAddress?: string, createOrgDirectorManagerUserIntroduction?: string, createOrgDirectorManagerUserOrderNo?: number, createOrgDirectorManagerUserStatus?: StatusEnum, createOrgDirectorManagerUserRemark?: string, createOrgDirectorManagerUserAccountType?: AccountTypeEnum, createOrgDirectorManagerUserOrgId?: number, createOrgDirectorManagerUserSysOrgPid?: number, createOrgDirectorManagerUserSysOrgName?: string, createOrgDirectorManagerUserSysOrgCode?: string, createOrgDirectorManagerUserSysOrgLevel?: number, createOrgDirectorManagerUserSysOrgType?: string, createOrgDirectorManagerUserSysOrgDirectorId?: number, createOrgDirectorManagerUserSysOrgDirector?: SysUser, createOrgDirectorManagerUserSysOrgOrderNo?: number, createOrgDirectorManagerUserSysOrgStatus?: StatusEnum, createOrgDirectorManagerUserSysOrgRemark?: string, createOrgDirectorManagerUserSysOrgChildren?: Array<SysOrg>, createOrgDirectorManagerUserSysOrgDisabled?: boolean, createOrgDirectorManagerUserSysOrgTenantId?: number, createOrgDirectorManagerUserSysOrgCreateTime?: Date, createOrgDirectorManagerUserSysOrgUpdateTime?: Date, createOrgDirectorManagerUserSysOrgCreateUserId?: number, createOrgDirectorManagerUserSysOrgCreateUserName?: string, createOrgDirectorManagerUserSysOrgUpdateUserId?: number, createOrgDirectorManagerUserSysOrgUpdateUserName?: string, createOrgDirectorManagerUserSysOrgIsDelete?: boolean, createOrgDirectorManagerUserSysOrgId?: number, createOrgDirectorManagerUserManagerUserId?: number, createOrgDirectorManagerUserManagerUser?: SysUser, createOrgDirectorManagerUserPosId?: number, createOrgDirectorManagerUserSysPosName?: string, createOrgDirectorManagerUserSysPosCode?: string, createOrgDirectorManagerUserSysPosOrderNo?: number, createOrgDirectorManagerUserSysPosRemark?: string, createOrgDirectorManagerUserSysPosStatus?: StatusEnum, createOrgDirectorManagerUserSysPosTenantId?: number, createOrgDirectorManagerUserSysPosCreateTime?: Date, createOrgDirectorManagerUserSysPosUpdateTime?: Date, createOrgDirectorManagerUserSysPosCreateUserId?: number, createOrgDirectorManagerUserSysPosCreateUserName?: string, createOrgDirectorManagerUserSysPosUpdateUserId?: number, createOrgDirectorManagerUserSysPosUpdateUserName?: string, createOrgDirectorManagerUserSysPosIsDelete?: boolean, createOrgDirectorManagerUserSysPosId?: number, createOrgDirectorManagerUserJobNum?: string, createOrgDirectorManagerUserPosLevel?: string, createOrgDirectorManagerUserPosTitle?: string, createOrgDirectorManagerUserExpertise?: string, createOrgDirectorManagerUserOfficeZone?: string, createOrgDirectorManagerUserOffice?: string, createOrgDirectorManagerUserJoinDate?: Date, createOrgDirectorManagerUserLastLoginIp?: string, createOrgDirectorManagerUserLastLoginAddress?: string, createOrgDirectorManagerUserLastLoginTime?: Date, createOrgDirectorManagerUserLastLoginDevice?: string, createOrgDirectorManagerUserSignature?: string, createOrgDirectorManagerUserTenantId?: number, createOrgDirectorManagerUserCreateTime?: Date, createOrgDirectorManagerUserUpdateTime?: Date, createOrgDirectorManagerUserCreateUserId?: number, createOrgDirectorManagerUserCreateUserName?: string, createOrgDirectorManagerUserUpdateUserId?: number, createOrgDirectorManagerUserUpdateUserName?: string, createOrgDirectorManagerUserIsDelete?: boolean, createOrgDirectorManagerUserId?: number, createOrgDirectorPosId?: number, createOrgDirectorSysPosName?: string, createOrgDirectorSysPosCode?: string, createOrgDirectorSysPosOrderNo?: number, createOrgDirectorSysPosRemark?: string, createOrgDirectorSysPosStatus?: StatusEnum, createOrgDirectorSysPosTenantId?: number, createOrgDirectorSysPosCreateTime?: Date, createOrgDirectorSysPosUpdateTime?: Date, createOrgDirectorSysPosCreateUserId?: number, createOrgDirectorSysPosCreateUserName?: string, createOrgDirectorSysPosUpdateUserId?: number, createOrgDirectorSysPosUpdateUserName?: string, createOrgDirectorSysPosIsDelete?: boolean, createOrgDirectorSysPosId?: number, createOrgDirectorJobNum?: string, createOrgDirectorPosLevel?: string, createOrgDirectorPosTitle?: string, createOrgDirectorExpertise?: string, createOrgDirectorOfficeZone?: string, createOrgDirectorOffice?: string, createOrgDirectorJoinDate?: Date, createOrgDirectorLastLoginIp?: string, createOrgDirectorLastLoginAddress?: string, createOrgDirectorLastLoginTime?: Date, createOrgDirectorLastLoginDevice?: string, createOrgDirectorSignature?: string, createOrgDirectorTenantId?: number, createOrgDirectorCreateTime?: Date, createOrgDirectorUpdateTime?: Date, createOrgDirectorCreateUserId?: number, createOrgDirectorCreateUserName?: string, createOrgDirectorUpdateUserId?: number, createOrgDirectorUpdateUserName?: string, createOrgDirectorIsDelete?: boolean, createOrgDirectorId?: number, createOrgOrderNo?: number, createOrgStatus?: StatusEnum, createOrgRemark?: string, createOrgChildren?: Array<SysOrg>, createOrgDisabled?: boolean, createOrgTenantId?: number, createOrgCreateTime?: Date, createOrgUpdateTime?: Date, createOrgCreateUserId?: number, createOrgCreateUserName?: string, createOrgUpdateUserId?: number, createOrgUpdateUserName?: string, createOrgIsDelete?: boolean, createOrgId?: number, createOrgName?: string, createTime?: Date, updateTime?: Date, createUserId?: number, createUserName?: string, updateUserId?: number, updateUserName?: string, isDelete?: boolean, id?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSysFile>> {
            return SysFileApiFp(configuration).apiSysFileUploadFilePostForm(file, path, savePath, allowSuffix, provider, bucketName, fileName, suffix, filePath, sizeKb, sizeInfo, url, fileMd5, relationName, relationId, belongId, fileType, isPublic, tenantId, createOrgId2, createOrgPid, createOrgName2, createOrgCode, createOrgLevel, createOrgType, createOrgDirectorId2, createOrgDirectorAccount, createOrgDirectorPassword, createOrgDirectorRealName, createOrgDirectorNickName, createOrgDirectorAvatar, createOrgDirectorSex, createOrgDirectorAge, createOrgDirectorBirthday, createOrgDirectorNation, createOrgDirectorPhone, createOrgDirectorCardType, createOrgDirectorIdCardNum, createOrgDirectorEmail, createOrgDirectorAddress, createOrgDirectorCultureLevel, createOrgDirectorPoliticalOutlook, createOrgDirectorCollege, createOrgDirectorOfficePhone, createOrgDirectorEmergencyContact, createOrgDirectorEmergencyPhone, createOrgDirectorEmergencyAddress, createOrgDirectorIntroduction, createOrgDirectorOrderNo, createOrgDirectorStatus, createOrgDirectorRemark, createOrgDirectorAccountType, createOrgDirectorOrgId, createOrgDirectorSysOrgPid, createOrgDirectorSysOrgName, createOrgDirectorSysOrgCode, createOrgDirectorSysOrgLevel, createOrgDirectorSysOrgType, createOrgDirectorSysOrgDirectorId, createOrgDirectorSysOrgDirector, createOrgDirectorSysOrgOrderNo, createOrgDirectorSysOrgStatus, createOrgDirectorSysOrgRemark, createOrgDirectorSysOrgChildren, createOrgDirectorSysOrgDisabled, createOrgDirectorSysOrgTenantId, createOrgDirectorSysOrgCreateTime, createOrgDirectorSysOrgUpdateTime, createOrgDirectorSysOrgCreateUserId, createOrgDirectorSysOrgCreateUserName, createOrgDirectorSysOrgUpdateUserId, createOrgDirectorSysOrgUpdateUserName, createOrgDirectorSysOrgIsDelete, createOrgDirectorSysOrgId, createOrgDirectorManagerUserId2, createOrgDirectorManagerUserAccount, createOrgDirectorManagerUserPassword, createOrgDirectorManagerUserRealName, createOrgDirectorManagerUserNickName, createOrgDirectorManagerUserAvatar, createOrgDirectorManagerUserSex, createOrgDirectorManagerUserAge, createOrgDirectorManagerUserBirthday, createOrgDirectorManagerUserNation, createOrgDirectorManagerUserPhone, createOrgDirectorManagerUserCardType, createOrgDirectorManagerUserIdCardNum, createOrgDirectorManagerUserEmail, createOrgDirectorManagerUserAddress, createOrgDirectorManagerUserCultureLevel, createOrgDirectorManagerUserPoliticalOutlook, createOrgDirectorManagerUserCollege, createOrgDirectorManagerUserOfficePhone, createOrgDirectorManagerUserEmergencyContact, createOrgDirectorManagerUserEmergencyPhone, createOrgDirectorManagerUserEmergencyAddress, createOrgDirectorManagerUserIntroduction, createOrgDirectorManagerUserOrderNo, createOrgDirectorManagerUserStatus, createOrgDirectorManagerUserRemark, createOrgDirectorManagerUserAccountType, createOrgDirectorManagerUserOrgId, createOrgDirectorManagerUserSysOrgPid, createOrgDirectorManagerUserSysOrgName, createOrgDirectorManagerUserSysOrgCode, createOrgDirectorManagerUserSysOrgLevel, createOrgDirectorManagerUserSysOrgType, createOrgDirectorManagerUserSysOrgDirectorId, createOrgDirectorManagerUserSysOrgDirector, createOrgDirectorManagerUserSysOrgOrderNo, createOrgDirectorManagerUserSysOrgStatus, createOrgDirectorManagerUserSysOrgRemark, createOrgDirectorManagerUserSysOrgChildren, createOrgDirectorManagerUserSysOrgDisabled, createOrgDirectorManagerUserSysOrgTenantId, createOrgDirectorManagerUserSysOrgCreateTime, createOrgDirectorManagerUserSysOrgUpdateTime, createOrgDirectorManagerUserSysOrgCreateUserId, createOrgDirectorManagerUserSysOrgCreateUserName, createOrgDirectorManagerUserSysOrgUpdateUserId, createOrgDirectorManagerUserSysOrgUpdateUserName, createOrgDirectorManagerUserSysOrgIsDelete, createOrgDirectorManagerUserSysOrgId, createOrgDirectorManagerUserManagerUserId, createOrgDirectorManagerUserManagerUser, createOrgDirectorManagerUserPosId, createOrgDirectorManagerUserSysPosName, createOrgDirectorManagerUserSysPosCode, createOrgDirectorManagerUserSysPosOrderNo, createOrgDirectorManagerUserSysPosRemark, createOrgDirectorManagerUserSysPosStatus, createOrgDirectorManagerUserSysPosTenantId, createOrgDirectorManagerUserSysPosCreateTime, createOrgDirectorManagerUserSysPosUpdateTime, createOrgDirectorManagerUserSysPosCreateUserId, createOrgDirectorManagerUserSysPosCreateUserName, createOrgDirectorManagerUserSysPosUpdateUserId, createOrgDirectorManagerUserSysPosUpdateUserName, createOrgDirectorManagerUserSysPosIsDelete, createOrgDirectorManagerUserSysPosId, createOrgDirectorManagerUserJobNum, createOrgDirectorManagerUserPosLevel, createOrgDirectorManagerUserPosTitle, createOrgDirectorManagerUserExpertise, createOrgDirectorManagerUserOfficeZone, createOrgDirectorManagerUserOffice, createOrgDirectorManagerUserJoinDate, createOrgDirectorManagerUserLastLoginIp, createOrgDirectorManagerUserLastLoginAddress, createOrgDirectorManagerUserLastLoginTime, createOrgDirectorManagerUserLastLoginDevice, createOrgDirectorManagerUserSignature, createOrgDirectorManagerUserTenantId, createOrgDirectorManagerUserCreateTime, createOrgDirectorManagerUserUpdateTime, createOrgDirectorManagerUserCreateUserId, createOrgDirectorManagerUserCreateUserName, createOrgDirectorManagerUserUpdateUserId, createOrgDirectorManagerUserUpdateUserName, createOrgDirectorManagerUserIsDelete, createOrgDirectorManagerUserId, createOrgDirectorPosId, createOrgDirectorSysPosName, createOrgDirectorSysPosCode, createOrgDirectorSysPosOrderNo, createOrgDirectorSysPosRemark, createOrgDirectorSysPosStatus, createOrgDirectorSysPosTenantId, createOrgDirectorSysPosCreateTime, createOrgDirectorSysPosUpdateTime, createOrgDirectorSysPosCreateUserId, createOrgDirectorSysPosCreateUserName, createOrgDirectorSysPosUpdateUserId, createOrgDirectorSysPosUpdateUserName, createOrgDirectorSysPosIsDelete, createOrgDirectorSysPosId, createOrgDirectorJobNum, createOrgDirectorPosLevel, createOrgDirectorPosTitle, createOrgDirectorExpertise, createOrgDirectorOfficeZone, createOrgDirectorOffice, createOrgDirectorJoinDate, createOrgDirectorLastLoginIp, createOrgDirectorLastLoginAddress, createOrgDirectorLastLoginTime, createOrgDirectorLastLoginDevice, createOrgDirectorSignature, createOrgDirectorTenantId, createOrgDirectorCreateTime, createOrgDirectorUpdateTime, createOrgDirectorCreateUserId, createOrgDirectorCreateUserName, createOrgDirectorUpdateUserId, createOrgDirectorUpdateUserName, createOrgDirectorIsDelete, createOrgDirectorId, createOrgOrderNo, createOrgStatus, createOrgRemark, createOrgChildren, createOrgDisabled, createOrgTenantId, createOrgCreateTime, createOrgUpdateTime, createOrgCreateUserId, createOrgCreateUserName, createOrgUpdateUserId, createOrgUpdateUserName, createOrgIsDelete, createOrgId, createOrgName, createTime, updateTime, createUserId, createUserName, updateUserId, updateUserName, isDelete, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传多文件 🔖
         * @param {Array<Blob>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadFilesPostForm(files?: Array<Blob>, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListSysFile>> {
            return SysFileApiFp(configuration).apiSysFileUploadFilesPostForm(files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传电子签名 🔖
         * @param {Blob} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSysFileUploadSignaturePostForm(file?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSysFile>> {
            return SysFileApiFp(configuration).apiSysFileUploadSignaturePostForm(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SysFileApi - object-oriented interface
 * @export
 * @class SysFileApi
 * @extends {BaseAPI}
 */
export class SysFileApi extends BaseAPI {
    /**
     * 
     * @summary 删除文件 🔖
     * @param {DeleteFileInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileDeletePost(body?: DeleteFileInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysFileApiFp(this.configuration).apiSysFileDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 下载指定文件Base64格式 🔖
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileDownloadFileBase64Post(body?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultString>> {
        return SysFileApiFp(this.configuration).apiSysFileDownloadFileBase64Post(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 根据文件Id或Url下载 🔖
     * @param {SysFile} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileDownloadFilePost(body?: SysFile, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultIActionResult>> {
        return SysFileApiFp(this.configuration).apiSysFileDownloadFilePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取文件 🔖
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileFileGet(id?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSysFile>> {
        return SysFileApiFp(this.configuration).apiSysFileFileGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 获取文件分页列表 🔖
     * @param {PageFileInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFilePagePost(body?: PageFileInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListSysFile>> {
        return SysFileApiFp(this.configuration).apiSysFilePagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 文件预览 🔖
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFilePreviewIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultIActionResult>> {
        return SysFileApiFp(this.configuration).apiSysFilePreviewIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 根据关联查询附件
     * @param {string} [relationName] 关联对象名称
     * @param {number} [relationId] 关联对象Id
     * @param {string} [fileTypes] 文件类型：多个以\&quot;,\&quot;分割
     * @param {number} [belongId] 所属Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileRelationFilesGet(relationName?: string, relationId?: number, fileTypes?: string, belongId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListSysFile>> {
        return SysFileApiFp(this.configuration).apiSysFileRelationFilesGet(relationName, relationId, fileTypes, belongId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 更新文件 🔖
     * @param {SysFile} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileUpdatePost(body?: SysFile, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SysFileApiFp(this.configuration).apiSysFileUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传头像 🔖
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileUploadAvatarPostForm(file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSysFile>> {
        return SysFileApiFp(this.configuration).apiSysFileUploadAvatarPostForm(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传文件Base64 🔖
     * @param {UploadFileFromBase64Input} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileUploadFileFromBase64Post(body?: UploadFileFromBase64Input, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSysFile>> {
        return SysFileApiFp(this.configuration).apiSysFileUploadFileFromBase64Post(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传文件 🔖
     * @param {Blob} [file] 
     * @param {string} [path] 
     * @param {string} [savePath] 
     * @param {string} [allowSuffix] 
     * @param {string} [provider] 
     * @param {string} [bucketName] 
     * @param {string} [fileName] 
     * @param {string} [suffix] 
     * @param {string} [filePath] 
     * @param {number} [sizeKb] 
     * @param {string} [sizeInfo] 
     * @param {string} [url] 
     * @param {string} [fileMd5] 
     * @param {string} [relationName] 
     * @param {number} [relationId] 
     * @param {number} [belongId] 
     * @param {string} [fileType] 
     * @param {boolean} [isPublic] 
     * @param {number} [tenantId] 
     * @param {number} [createOrgId2] 
     * @param {number} [createOrgPid] 
     * @param {string} [createOrgName2] 
     * @param {string} [createOrgCode] 
     * @param {number} [createOrgLevel] 
     * @param {string} [createOrgType] 
     * @param {number} [createOrgDirectorId2] 
     * @param {string} [createOrgDirectorAccount] 
     * @param {string} [createOrgDirectorPassword] 
     * @param {string} [createOrgDirectorRealName] 
     * @param {string} [createOrgDirectorNickName] 
     * @param {string} [createOrgDirectorAvatar] 
     * @param {GenderEnum} [createOrgDirectorSex] 
     * @param {number} [createOrgDirectorAge] 
     * @param {Date} [createOrgDirectorBirthday] 
     * @param {string} [createOrgDirectorNation] 
     * @param {string} [createOrgDirectorPhone] 
     * @param {CardTypeEnum} [createOrgDirectorCardType] 
     * @param {string} [createOrgDirectorIdCardNum] 
     * @param {string} [createOrgDirectorEmail] 
     * @param {string} [createOrgDirectorAddress] 
     * @param {CultureLevelEnum} [createOrgDirectorCultureLevel] 
     * @param {string} [createOrgDirectorPoliticalOutlook] 
     * @param {string} [createOrgDirectorCollege] 
     * @param {string} [createOrgDirectorOfficePhone] 
     * @param {string} [createOrgDirectorEmergencyContact] 
     * @param {string} [createOrgDirectorEmergencyPhone] 
     * @param {string} [createOrgDirectorEmergencyAddress] 
     * @param {string} [createOrgDirectorIntroduction] 
     * @param {number} [createOrgDirectorOrderNo] 
     * @param {StatusEnum} [createOrgDirectorStatus] 
     * @param {string} [createOrgDirectorRemark] 
     * @param {AccountTypeEnum} [createOrgDirectorAccountType] 
     * @param {number} [createOrgDirectorOrgId] 
     * @param {number} [createOrgDirectorSysOrgPid] 
     * @param {string} [createOrgDirectorSysOrgName] 
     * @param {string} [createOrgDirectorSysOrgCode] 
     * @param {number} [createOrgDirectorSysOrgLevel] 
     * @param {string} [createOrgDirectorSysOrgType] 
     * @param {number} [createOrgDirectorSysOrgDirectorId] 
     * @param {SysUser} [createOrgDirectorSysOrgDirector] 
     * @param {number} [createOrgDirectorSysOrgOrderNo] 
     * @param {StatusEnum} [createOrgDirectorSysOrgStatus] 
     * @param {string} [createOrgDirectorSysOrgRemark] 
     * @param {Array<SysOrg>} [createOrgDirectorSysOrgChildren] 
     * @param {boolean} [createOrgDirectorSysOrgDisabled] 
     * @param {number} [createOrgDirectorSysOrgTenantId] 
     * @param {Date} [createOrgDirectorSysOrgCreateTime] 
     * @param {Date} [createOrgDirectorSysOrgUpdateTime] 
     * @param {number} [createOrgDirectorSysOrgCreateUserId] 
     * @param {string} [createOrgDirectorSysOrgCreateUserName] 
     * @param {number} [createOrgDirectorSysOrgUpdateUserId] 
     * @param {string} [createOrgDirectorSysOrgUpdateUserName] 
     * @param {boolean} [createOrgDirectorSysOrgIsDelete] 
     * @param {number} [createOrgDirectorSysOrgId] 
     * @param {number} [createOrgDirectorManagerUserId2] 
     * @param {string} [createOrgDirectorManagerUserAccount] 
     * @param {string} [createOrgDirectorManagerUserPassword] 
     * @param {string} [createOrgDirectorManagerUserRealName] 
     * @param {string} [createOrgDirectorManagerUserNickName] 
     * @param {string} [createOrgDirectorManagerUserAvatar] 
     * @param {GenderEnum} [createOrgDirectorManagerUserSex] 
     * @param {number} [createOrgDirectorManagerUserAge] 
     * @param {Date} [createOrgDirectorManagerUserBirthday] 
     * @param {string} [createOrgDirectorManagerUserNation] 
     * @param {string} [createOrgDirectorManagerUserPhone] 
     * @param {CardTypeEnum} [createOrgDirectorManagerUserCardType] 
     * @param {string} [createOrgDirectorManagerUserIdCardNum] 
     * @param {string} [createOrgDirectorManagerUserEmail] 
     * @param {string} [createOrgDirectorManagerUserAddress] 
     * @param {CultureLevelEnum} [createOrgDirectorManagerUserCultureLevel] 
     * @param {string} [createOrgDirectorManagerUserPoliticalOutlook] 
     * @param {string} [createOrgDirectorManagerUserCollege] 
     * @param {string} [createOrgDirectorManagerUserOfficePhone] 
     * @param {string} [createOrgDirectorManagerUserEmergencyContact] 
     * @param {string} [createOrgDirectorManagerUserEmergencyPhone] 
     * @param {string} [createOrgDirectorManagerUserEmergencyAddress] 
     * @param {string} [createOrgDirectorManagerUserIntroduction] 
     * @param {number} [createOrgDirectorManagerUserOrderNo] 
     * @param {StatusEnum} [createOrgDirectorManagerUserStatus] 
     * @param {string} [createOrgDirectorManagerUserRemark] 
     * @param {AccountTypeEnum} [createOrgDirectorManagerUserAccountType] 
     * @param {number} [createOrgDirectorManagerUserOrgId] 
     * @param {number} [createOrgDirectorManagerUserSysOrgPid] 
     * @param {string} [createOrgDirectorManagerUserSysOrgName] 
     * @param {string} [createOrgDirectorManagerUserSysOrgCode] 
     * @param {number} [createOrgDirectorManagerUserSysOrgLevel] 
     * @param {string} [createOrgDirectorManagerUserSysOrgType] 
     * @param {number} [createOrgDirectorManagerUserSysOrgDirectorId] 
     * @param {SysUser} [createOrgDirectorManagerUserSysOrgDirector] 
     * @param {number} [createOrgDirectorManagerUserSysOrgOrderNo] 
     * @param {StatusEnum} [createOrgDirectorManagerUserSysOrgStatus] 
     * @param {string} [createOrgDirectorManagerUserSysOrgRemark] 
     * @param {Array<SysOrg>} [createOrgDirectorManagerUserSysOrgChildren] 
     * @param {boolean} [createOrgDirectorManagerUserSysOrgDisabled] 
     * @param {number} [createOrgDirectorManagerUserSysOrgTenantId] 
     * @param {Date} [createOrgDirectorManagerUserSysOrgCreateTime] 
     * @param {Date} [createOrgDirectorManagerUserSysOrgUpdateTime] 
     * @param {number} [createOrgDirectorManagerUserSysOrgCreateUserId] 
     * @param {string} [createOrgDirectorManagerUserSysOrgCreateUserName] 
     * @param {number} [createOrgDirectorManagerUserSysOrgUpdateUserId] 
     * @param {string} [createOrgDirectorManagerUserSysOrgUpdateUserName] 
     * @param {boolean} [createOrgDirectorManagerUserSysOrgIsDelete] 
     * @param {number} [createOrgDirectorManagerUserSysOrgId] 
     * @param {number} [createOrgDirectorManagerUserManagerUserId] 
     * @param {SysUser} [createOrgDirectorManagerUserManagerUser] 
     * @param {number} [createOrgDirectorManagerUserPosId] 
     * @param {string} [createOrgDirectorManagerUserSysPosName] 
     * @param {string} [createOrgDirectorManagerUserSysPosCode] 
     * @param {number} [createOrgDirectorManagerUserSysPosOrderNo] 
     * @param {string} [createOrgDirectorManagerUserSysPosRemark] 
     * @param {StatusEnum} [createOrgDirectorManagerUserSysPosStatus] 
     * @param {number} [createOrgDirectorManagerUserSysPosTenantId] 
     * @param {Date} [createOrgDirectorManagerUserSysPosCreateTime] 
     * @param {Date} [createOrgDirectorManagerUserSysPosUpdateTime] 
     * @param {number} [createOrgDirectorManagerUserSysPosCreateUserId] 
     * @param {string} [createOrgDirectorManagerUserSysPosCreateUserName] 
     * @param {number} [createOrgDirectorManagerUserSysPosUpdateUserId] 
     * @param {string} [createOrgDirectorManagerUserSysPosUpdateUserName] 
     * @param {boolean} [createOrgDirectorManagerUserSysPosIsDelete] 
     * @param {number} [createOrgDirectorManagerUserSysPosId] 
     * @param {string} [createOrgDirectorManagerUserJobNum] 
     * @param {string} [createOrgDirectorManagerUserPosLevel] 
     * @param {string} [createOrgDirectorManagerUserPosTitle] 
     * @param {string} [createOrgDirectorManagerUserExpertise] 
     * @param {string} [createOrgDirectorManagerUserOfficeZone] 
     * @param {string} [createOrgDirectorManagerUserOffice] 
     * @param {Date} [createOrgDirectorManagerUserJoinDate] 
     * @param {string} [createOrgDirectorManagerUserLastLoginIp] 
     * @param {string} [createOrgDirectorManagerUserLastLoginAddress] 
     * @param {Date} [createOrgDirectorManagerUserLastLoginTime] 
     * @param {string} [createOrgDirectorManagerUserLastLoginDevice] 
     * @param {string} [createOrgDirectorManagerUserSignature] 
     * @param {number} [createOrgDirectorManagerUserTenantId] 
     * @param {Date} [createOrgDirectorManagerUserCreateTime] 
     * @param {Date} [createOrgDirectorManagerUserUpdateTime] 
     * @param {number} [createOrgDirectorManagerUserCreateUserId] 
     * @param {string} [createOrgDirectorManagerUserCreateUserName] 
     * @param {number} [createOrgDirectorManagerUserUpdateUserId] 
     * @param {string} [createOrgDirectorManagerUserUpdateUserName] 
     * @param {boolean} [createOrgDirectorManagerUserIsDelete] 
     * @param {number} [createOrgDirectorManagerUserId] 
     * @param {number} [createOrgDirectorPosId] 
     * @param {string} [createOrgDirectorSysPosName] 
     * @param {string} [createOrgDirectorSysPosCode] 
     * @param {number} [createOrgDirectorSysPosOrderNo] 
     * @param {string} [createOrgDirectorSysPosRemark] 
     * @param {StatusEnum} [createOrgDirectorSysPosStatus] 
     * @param {number} [createOrgDirectorSysPosTenantId] 
     * @param {Date} [createOrgDirectorSysPosCreateTime] 
     * @param {Date} [createOrgDirectorSysPosUpdateTime] 
     * @param {number} [createOrgDirectorSysPosCreateUserId] 
     * @param {string} [createOrgDirectorSysPosCreateUserName] 
     * @param {number} [createOrgDirectorSysPosUpdateUserId] 
     * @param {string} [createOrgDirectorSysPosUpdateUserName] 
     * @param {boolean} [createOrgDirectorSysPosIsDelete] 
     * @param {number} [createOrgDirectorSysPosId] 
     * @param {string} [createOrgDirectorJobNum] 
     * @param {string} [createOrgDirectorPosLevel] 
     * @param {string} [createOrgDirectorPosTitle] 
     * @param {string} [createOrgDirectorExpertise] 
     * @param {string} [createOrgDirectorOfficeZone] 
     * @param {string} [createOrgDirectorOffice] 
     * @param {Date} [createOrgDirectorJoinDate] 
     * @param {string} [createOrgDirectorLastLoginIp] 
     * @param {string} [createOrgDirectorLastLoginAddress] 
     * @param {Date} [createOrgDirectorLastLoginTime] 
     * @param {string} [createOrgDirectorLastLoginDevice] 
     * @param {string} [createOrgDirectorSignature] 
     * @param {number} [createOrgDirectorTenantId] 
     * @param {Date} [createOrgDirectorCreateTime] 
     * @param {Date} [createOrgDirectorUpdateTime] 
     * @param {number} [createOrgDirectorCreateUserId] 
     * @param {string} [createOrgDirectorCreateUserName] 
     * @param {number} [createOrgDirectorUpdateUserId] 
     * @param {string} [createOrgDirectorUpdateUserName] 
     * @param {boolean} [createOrgDirectorIsDelete] 
     * @param {number} [createOrgDirectorId] 
     * @param {number} [createOrgOrderNo] 
     * @param {StatusEnum} [createOrgStatus] 
     * @param {string} [createOrgRemark] 
     * @param {Array<SysOrg>} [createOrgChildren] 
     * @param {boolean} [createOrgDisabled] 
     * @param {number} [createOrgTenantId] 
     * @param {Date} [createOrgCreateTime] 
     * @param {Date} [createOrgUpdateTime] 
     * @param {number} [createOrgCreateUserId] 
     * @param {string} [createOrgCreateUserName] 
     * @param {number} [createOrgUpdateUserId] 
     * @param {string} [createOrgUpdateUserName] 
     * @param {boolean} [createOrgIsDelete] 
     * @param {number} [createOrgId] 
     * @param {string} [createOrgName] 
     * @param {Date} [createTime] 
     * @param {Date} [updateTime] 
     * @param {number} [createUserId] 
     * @param {string} [createUserName] 
     * @param {number} [updateUserId] 
     * @param {string} [updateUserName] 
     * @param {boolean} [isDelete] 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileUploadFilePostForm(file?: Blob, path?: string, savePath?: string, allowSuffix?: string, provider?: string, bucketName?: string, fileName?: string, suffix?: string, filePath?: string, sizeKb?: number, sizeInfo?: string, url?: string, fileMd5?: string, relationName?: string, relationId?: number, belongId?: number, fileType?: string, isPublic?: boolean, tenantId?: number, createOrgId2?: number, createOrgPid?: number, createOrgName2?: string, createOrgCode?: string, createOrgLevel?: number, createOrgType?: string, createOrgDirectorId2?: number, createOrgDirectorAccount?: string, createOrgDirectorPassword?: string, createOrgDirectorRealName?: string, createOrgDirectorNickName?: string, createOrgDirectorAvatar?: string, createOrgDirectorSex?: GenderEnum, createOrgDirectorAge?: number, createOrgDirectorBirthday?: Date, createOrgDirectorNation?: string, createOrgDirectorPhone?: string, createOrgDirectorCardType?: CardTypeEnum, createOrgDirectorIdCardNum?: string, createOrgDirectorEmail?: string, createOrgDirectorAddress?: string, createOrgDirectorCultureLevel?: CultureLevelEnum, createOrgDirectorPoliticalOutlook?: string, createOrgDirectorCollege?: string, createOrgDirectorOfficePhone?: string, createOrgDirectorEmergencyContact?: string, createOrgDirectorEmergencyPhone?: string, createOrgDirectorEmergencyAddress?: string, createOrgDirectorIntroduction?: string, createOrgDirectorOrderNo?: number, createOrgDirectorStatus?: StatusEnum, createOrgDirectorRemark?: string, createOrgDirectorAccountType?: AccountTypeEnum, createOrgDirectorOrgId?: number, createOrgDirectorSysOrgPid?: number, createOrgDirectorSysOrgName?: string, createOrgDirectorSysOrgCode?: string, createOrgDirectorSysOrgLevel?: number, createOrgDirectorSysOrgType?: string, createOrgDirectorSysOrgDirectorId?: number, createOrgDirectorSysOrgDirector?: SysUser, createOrgDirectorSysOrgOrderNo?: number, createOrgDirectorSysOrgStatus?: StatusEnum, createOrgDirectorSysOrgRemark?: string, createOrgDirectorSysOrgChildren?: Array<SysOrg>, createOrgDirectorSysOrgDisabled?: boolean, createOrgDirectorSysOrgTenantId?: number, createOrgDirectorSysOrgCreateTime?: Date, createOrgDirectorSysOrgUpdateTime?: Date, createOrgDirectorSysOrgCreateUserId?: number, createOrgDirectorSysOrgCreateUserName?: string, createOrgDirectorSysOrgUpdateUserId?: number, createOrgDirectorSysOrgUpdateUserName?: string, createOrgDirectorSysOrgIsDelete?: boolean, createOrgDirectorSysOrgId?: number, createOrgDirectorManagerUserId2?: number, createOrgDirectorManagerUserAccount?: string, createOrgDirectorManagerUserPassword?: string, createOrgDirectorManagerUserRealName?: string, createOrgDirectorManagerUserNickName?: string, createOrgDirectorManagerUserAvatar?: string, createOrgDirectorManagerUserSex?: GenderEnum, createOrgDirectorManagerUserAge?: number, createOrgDirectorManagerUserBirthday?: Date, createOrgDirectorManagerUserNation?: string, createOrgDirectorManagerUserPhone?: string, createOrgDirectorManagerUserCardType?: CardTypeEnum, createOrgDirectorManagerUserIdCardNum?: string, createOrgDirectorManagerUserEmail?: string, createOrgDirectorManagerUserAddress?: string, createOrgDirectorManagerUserCultureLevel?: CultureLevelEnum, createOrgDirectorManagerUserPoliticalOutlook?: string, createOrgDirectorManagerUserCollege?: string, createOrgDirectorManagerUserOfficePhone?: string, createOrgDirectorManagerUserEmergencyContact?: string, createOrgDirectorManagerUserEmergencyPhone?: string, createOrgDirectorManagerUserEmergencyAddress?: string, createOrgDirectorManagerUserIntroduction?: string, createOrgDirectorManagerUserOrderNo?: number, createOrgDirectorManagerUserStatus?: StatusEnum, createOrgDirectorManagerUserRemark?: string, createOrgDirectorManagerUserAccountType?: AccountTypeEnum, createOrgDirectorManagerUserOrgId?: number, createOrgDirectorManagerUserSysOrgPid?: number, createOrgDirectorManagerUserSysOrgName?: string, createOrgDirectorManagerUserSysOrgCode?: string, createOrgDirectorManagerUserSysOrgLevel?: number, createOrgDirectorManagerUserSysOrgType?: string, createOrgDirectorManagerUserSysOrgDirectorId?: number, createOrgDirectorManagerUserSysOrgDirector?: SysUser, createOrgDirectorManagerUserSysOrgOrderNo?: number, createOrgDirectorManagerUserSysOrgStatus?: StatusEnum, createOrgDirectorManagerUserSysOrgRemark?: string, createOrgDirectorManagerUserSysOrgChildren?: Array<SysOrg>, createOrgDirectorManagerUserSysOrgDisabled?: boolean, createOrgDirectorManagerUserSysOrgTenantId?: number, createOrgDirectorManagerUserSysOrgCreateTime?: Date, createOrgDirectorManagerUserSysOrgUpdateTime?: Date, createOrgDirectorManagerUserSysOrgCreateUserId?: number, createOrgDirectorManagerUserSysOrgCreateUserName?: string, createOrgDirectorManagerUserSysOrgUpdateUserId?: number, createOrgDirectorManagerUserSysOrgUpdateUserName?: string, createOrgDirectorManagerUserSysOrgIsDelete?: boolean, createOrgDirectorManagerUserSysOrgId?: number, createOrgDirectorManagerUserManagerUserId?: number, createOrgDirectorManagerUserManagerUser?: SysUser, createOrgDirectorManagerUserPosId?: number, createOrgDirectorManagerUserSysPosName?: string, createOrgDirectorManagerUserSysPosCode?: string, createOrgDirectorManagerUserSysPosOrderNo?: number, createOrgDirectorManagerUserSysPosRemark?: string, createOrgDirectorManagerUserSysPosStatus?: StatusEnum, createOrgDirectorManagerUserSysPosTenantId?: number, createOrgDirectorManagerUserSysPosCreateTime?: Date, createOrgDirectorManagerUserSysPosUpdateTime?: Date, createOrgDirectorManagerUserSysPosCreateUserId?: number, createOrgDirectorManagerUserSysPosCreateUserName?: string, createOrgDirectorManagerUserSysPosUpdateUserId?: number, createOrgDirectorManagerUserSysPosUpdateUserName?: string, createOrgDirectorManagerUserSysPosIsDelete?: boolean, createOrgDirectorManagerUserSysPosId?: number, createOrgDirectorManagerUserJobNum?: string, createOrgDirectorManagerUserPosLevel?: string, createOrgDirectorManagerUserPosTitle?: string, createOrgDirectorManagerUserExpertise?: string, createOrgDirectorManagerUserOfficeZone?: string, createOrgDirectorManagerUserOffice?: string, createOrgDirectorManagerUserJoinDate?: Date, createOrgDirectorManagerUserLastLoginIp?: string, createOrgDirectorManagerUserLastLoginAddress?: string, createOrgDirectorManagerUserLastLoginTime?: Date, createOrgDirectorManagerUserLastLoginDevice?: string, createOrgDirectorManagerUserSignature?: string, createOrgDirectorManagerUserTenantId?: number, createOrgDirectorManagerUserCreateTime?: Date, createOrgDirectorManagerUserUpdateTime?: Date, createOrgDirectorManagerUserCreateUserId?: number, createOrgDirectorManagerUserCreateUserName?: string, createOrgDirectorManagerUserUpdateUserId?: number, createOrgDirectorManagerUserUpdateUserName?: string, createOrgDirectorManagerUserIsDelete?: boolean, createOrgDirectorManagerUserId?: number, createOrgDirectorPosId?: number, createOrgDirectorSysPosName?: string, createOrgDirectorSysPosCode?: string, createOrgDirectorSysPosOrderNo?: number, createOrgDirectorSysPosRemark?: string, createOrgDirectorSysPosStatus?: StatusEnum, createOrgDirectorSysPosTenantId?: number, createOrgDirectorSysPosCreateTime?: Date, createOrgDirectorSysPosUpdateTime?: Date, createOrgDirectorSysPosCreateUserId?: number, createOrgDirectorSysPosCreateUserName?: string, createOrgDirectorSysPosUpdateUserId?: number, createOrgDirectorSysPosUpdateUserName?: string, createOrgDirectorSysPosIsDelete?: boolean, createOrgDirectorSysPosId?: number, createOrgDirectorJobNum?: string, createOrgDirectorPosLevel?: string, createOrgDirectorPosTitle?: string, createOrgDirectorExpertise?: string, createOrgDirectorOfficeZone?: string, createOrgDirectorOffice?: string, createOrgDirectorJoinDate?: Date, createOrgDirectorLastLoginIp?: string, createOrgDirectorLastLoginAddress?: string, createOrgDirectorLastLoginTime?: Date, createOrgDirectorLastLoginDevice?: string, createOrgDirectorSignature?: string, createOrgDirectorTenantId?: number, createOrgDirectorCreateTime?: Date, createOrgDirectorUpdateTime?: Date, createOrgDirectorCreateUserId?: number, createOrgDirectorCreateUserName?: string, createOrgDirectorUpdateUserId?: number, createOrgDirectorUpdateUserName?: string, createOrgDirectorIsDelete?: boolean, createOrgDirectorId?: number, createOrgOrderNo?: number, createOrgStatus?: StatusEnum, createOrgRemark?: string, createOrgChildren?: Array<SysOrg>, createOrgDisabled?: boolean, createOrgTenantId?: number, createOrgCreateTime?: Date, createOrgUpdateTime?: Date, createOrgCreateUserId?: number, createOrgCreateUserName?: string, createOrgUpdateUserId?: number, createOrgUpdateUserName?: string, createOrgIsDelete?: boolean, createOrgId?: number, createOrgName?: string, createTime?: Date, updateTime?: Date, createUserId?: number, createUserName?: string, updateUserId?: number, updateUserName?: string, isDelete?: boolean, id?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSysFile>> {
        return SysFileApiFp(this.configuration).apiSysFileUploadFilePostForm(file, path, savePath, allowSuffix, provider, bucketName, fileName, suffix, filePath, sizeKb, sizeInfo, url, fileMd5, relationName, relationId, belongId, fileType, isPublic, tenantId, createOrgId2, createOrgPid, createOrgName2, createOrgCode, createOrgLevel, createOrgType, createOrgDirectorId2, createOrgDirectorAccount, createOrgDirectorPassword, createOrgDirectorRealName, createOrgDirectorNickName, createOrgDirectorAvatar, createOrgDirectorSex, createOrgDirectorAge, createOrgDirectorBirthday, createOrgDirectorNation, createOrgDirectorPhone, createOrgDirectorCardType, createOrgDirectorIdCardNum, createOrgDirectorEmail, createOrgDirectorAddress, createOrgDirectorCultureLevel, createOrgDirectorPoliticalOutlook, createOrgDirectorCollege, createOrgDirectorOfficePhone, createOrgDirectorEmergencyContact, createOrgDirectorEmergencyPhone, createOrgDirectorEmergencyAddress, createOrgDirectorIntroduction, createOrgDirectorOrderNo, createOrgDirectorStatus, createOrgDirectorRemark, createOrgDirectorAccountType, createOrgDirectorOrgId, createOrgDirectorSysOrgPid, createOrgDirectorSysOrgName, createOrgDirectorSysOrgCode, createOrgDirectorSysOrgLevel, createOrgDirectorSysOrgType, createOrgDirectorSysOrgDirectorId, createOrgDirectorSysOrgDirector, createOrgDirectorSysOrgOrderNo, createOrgDirectorSysOrgStatus, createOrgDirectorSysOrgRemark, createOrgDirectorSysOrgChildren, createOrgDirectorSysOrgDisabled, createOrgDirectorSysOrgTenantId, createOrgDirectorSysOrgCreateTime, createOrgDirectorSysOrgUpdateTime, createOrgDirectorSysOrgCreateUserId, createOrgDirectorSysOrgCreateUserName, createOrgDirectorSysOrgUpdateUserId, createOrgDirectorSysOrgUpdateUserName, createOrgDirectorSysOrgIsDelete, createOrgDirectorSysOrgId, createOrgDirectorManagerUserId2, createOrgDirectorManagerUserAccount, createOrgDirectorManagerUserPassword, createOrgDirectorManagerUserRealName, createOrgDirectorManagerUserNickName, createOrgDirectorManagerUserAvatar, createOrgDirectorManagerUserSex, createOrgDirectorManagerUserAge, createOrgDirectorManagerUserBirthday, createOrgDirectorManagerUserNation, createOrgDirectorManagerUserPhone, createOrgDirectorManagerUserCardType, createOrgDirectorManagerUserIdCardNum, createOrgDirectorManagerUserEmail, createOrgDirectorManagerUserAddress, createOrgDirectorManagerUserCultureLevel, createOrgDirectorManagerUserPoliticalOutlook, createOrgDirectorManagerUserCollege, createOrgDirectorManagerUserOfficePhone, createOrgDirectorManagerUserEmergencyContact, createOrgDirectorManagerUserEmergencyPhone, createOrgDirectorManagerUserEmergencyAddress, createOrgDirectorManagerUserIntroduction, createOrgDirectorManagerUserOrderNo, createOrgDirectorManagerUserStatus, createOrgDirectorManagerUserRemark, createOrgDirectorManagerUserAccountType, createOrgDirectorManagerUserOrgId, createOrgDirectorManagerUserSysOrgPid, createOrgDirectorManagerUserSysOrgName, createOrgDirectorManagerUserSysOrgCode, createOrgDirectorManagerUserSysOrgLevel, createOrgDirectorManagerUserSysOrgType, createOrgDirectorManagerUserSysOrgDirectorId, createOrgDirectorManagerUserSysOrgDirector, createOrgDirectorManagerUserSysOrgOrderNo, createOrgDirectorManagerUserSysOrgStatus, createOrgDirectorManagerUserSysOrgRemark, createOrgDirectorManagerUserSysOrgChildren, createOrgDirectorManagerUserSysOrgDisabled, createOrgDirectorManagerUserSysOrgTenantId, createOrgDirectorManagerUserSysOrgCreateTime, createOrgDirectorManagerUserSysOrgUpdateTime, createOrgDirectorManagerUserSysOrgCreateUserId, createOrgDirectorManagerUserSysOrgCreateUserName, createOrgDirectorManagerUserSysOrgUpdateUserId, createOrgDirectorManagerUserSysOrgUpdateUserName, createOrgDirectorManagerUserSysOrgIsDelete, createOrgDirectorManagerUserSysOrgId, createOrgDirectorManagerUserManagerUserId, createOrgDirectorManagerUserManagerUser, createOrgDirectorManagerUserPosId, createOrgDirectorManagerUserSysPosName, createOrgDirectorManagerUserSysPosCode, createOrgDirectorManagerUserSysPosOrderNo, createOrgDirectorManagerUserSysPosRemark, createOrgDirectorManagerUserSysPosStatus, createOrgDirectorManagerUserSysPosTenantId, createOrgDirectorManagerUserSysPosCreateTime, createOrgDirectorManagerUserSysPosUpdateTime, createOrgDirectorManagerUserSysPosCreateUserId, createOrgDirectorManagerUserSysPosCreateUserName, createOrgDirectorManagerUserSysPosUpdateUserId, createOrgDirectorManagerUserSysPosUpdateUserName, createOrgDirectorManagerUserSysPosIsDelete, createOrgDirectorManagerUserSysPosId, createOrgDirectorManagerUserJobNum, createOrgDirectorManagerUserPosLevel, createOrgDirectorManagerUserPosTitle, createOrgDirectorManagerUserExpertise, createOrgDirectorManagerUserOfficeZone, createOrgDirectorManagerUserOffice, createOrgDirectorManagerUserJoinDate, createOrgDirectorManagerUserLastLoginIp, createOrgDirectorManagerUserLastLoginAddress, createOrgDirectorManagerUserLastLoginTime, createOrgDirectorManagerUserLastLoginDevice, createOrgDirectorManagerUserSignature, createOrgDirectorManagerUserTenantId, createOrgDirectorManagerUserCreateTime, createOrgDirectorManagerUserUpdateTime, createOrgDirectorManagerUserCreateUserId, createOrgDirectorManagerUserCreateUserName, createOrgDirectorManagerUserUpdateUserId, createOrgDirectorManagerUserUpdateUserName, createOrgDirectorManagerUserIsDelete, createOrgDirectorManagerUserId, createOrgDirectorPosId, createOrgDirectorSysPosName, createOrgDirectorSysPosCode, createOrgDirectorSysPosOrderNo, createOrgDirectorSysPosRemark, createOrgDirectorSysPosStatus, createOrgDirectorSysPosTenantId, createOrgDirectorSysPosCreateTime, createOrgDirectorSysPosUpdateTime, createOrgDirectorSysPosCreateUserId, createOrgDirectorSysPosCreateUserName, createOrgDirectorSysPosUpdateUserId, createOrgDirectorSysPosUpdateUserName, createOrgDirectorSysPosIsDelete, createOrgDirectorSysPosId, createOrgDirectorJobNum, createOrgDirectorPosLevel, createOrgDirectorPosTitle, createOrgDirectorExpertise, createOrgDirectorOfficeZone, createOrgDirectorOffice, createOrgDirectorJoinDate, createOrgDirectorLastLoginIp, createOrgDirectorLastLoginAddress, createOrgDirectorLastLoginTime, createOrgDirectorLastLoginDevice, createOrgDirectorSignature, createOrgDirectorTenantId, createOrgDirectorCreateTime, createOrgDirectorUpdateTime, createOrgDirectorCreateUserId, createOrgDirectorCreateUserName, createOrgDirectorUpdateUserId, createOrgDirectorUpdateUserName, createOrgDirectorIsDelete, createOrgDirectorId, createOrgOrderNo, createOrgStatus, createOrgRemark, createOrgChildren, createOrgDisabled, createOrgTenantId, createOrgCreateTime, createOrgUpdateTime, createOrgCreateUserId, createOrgCreateUserName, createOrgUpdateUserId, createOrgUpdateUserName, createOrgIsDelete, createOrgId, createOrgName, createTime, updateTime, createUserId, createUserName, updateUserId, updateUserName, isDelete, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传多文件 🔖
     * @param {Array<Blob>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileUploadFilesPostForm(files?: Array<Blob>, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListSysFile>> {
        return SysFileApiFp(this.configuration).apiSysFileUploadFilesPostForm(files, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary 上传电子签名 🔖
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysFileApi
     */
    public async apiSysFileUploadSignaturePostForm(file?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSysFile>> {
        return SysFileApiFp(this.configuration).apiSysFileUploadSignaturePostForm(file, options).then((request) => request(this.axios, this.basePath));
    }
}
