<template>	
	  @if(@Model.HasTree ){
      @:<PageWrapper dense contentFullHeight contentClass="flex">
	      @:<OrgTree  @@select="handleSelect" class="w-1/4 xl:w-1/5"  ref="OrgTreeChild"/>
	      @:<BasicTable @@register="registerTable"  class="w-3/4 xl:w-4/5"  :searchInfo="searchInfo">
	  }
	  @if(!@Model.HasTree ){
   @:<div>
		@:<BasicTable @@register="registerTable" :searchInfo="searchInfo">
	  }
	  
      <template #toolbar>
		  @if(@Model.HasDatePicker ){
		  @:<a-button type="primary" @@click="handleLastday" >上一天</a-button>
		  <a-button type="primary" @@click="handleNextday" >下一天</a-button>
		  <a-button type="primary" @@click="handleLastMonth" >上一月</a-button>
		  <a-button type="primary" @@click="handleNextMonth" >下一月</a-button>
		  <br />
		  }
		  
		  @foreach (var column in Model.ChoosedElements){
		  @:<a-button type="primary" @@click="handleCreate" :disabled="!hasPermission('@(@Model.ClassName):@(@column)')">@(@column)</a-button>
		  }		  
	  </template>
		
@foreach (var column in Model.TableField){
if(@column.EffectType == "Upload"){
      @:<template #@(@column.LowerColumnName)="{ text, record }">
        <TableImg
          v-if="record.@(@column.LowerColumnName)Attachment"
          :size="60"
          :simpleShow="true"
          :showBadge="false"
          :imgList="[downUrl + '/' + record.@(@column.LowerColumnName)Attachment.id + record.@(@column.LowerColumnName)Attachment.suffix]"
        />
      </template>
}
}
      <template #action="{ record }">
        <TableAction
          :actions="[
            {
              icon: 'clarity:note-edit-line',
              label: '编辑',
              onClick: handleEdit.bind(null, record),
              disabled: !hasPermission('@(@Model.ClassName):update'),
            },
            {
              icon: 'ant-design:delete-outlined',
              color: 'error',
              label: '删除',
              ifShow: hasPermission('@(@Model.ClassName):delete'),
              popConfirm: {
                title: '是否确认删除',
                confirm: handleDelete.bind(null, record),
              },
            },
          ]"
        />
      </template>
    </BasicTable>
    <@(@Model.ClassName)Modal @@register="registerModal" @@success="handleSuccess" />
	@if(@Model.HasTree ){
    @: </PageWrapper>
	}
    @if(!@Model.HasTree ){
  @:</div>
	}
</template>
<script lang="ts">
  import { defineComponent, reactive, ref, unref } from 'vue';
  import { usePermission } from '/@@/hooks/web/usePermission';
  
  @if(Model.IsUpload){
  @:import { BasicTable, useTable, TableAction, TableImg } from '/@@/components/Table';
  }else{
  @:import { BasicTable, useTable, TableAction } from '/@@/components/Table';
  }
  import { useModal } from '/@@/components/Modal';
  import @(@Model.ClassName)Modal from './dataModal.vue';
  @if(Model.HasTree){
  @:import { PageWrapper } from '/@@/components/Page';
  @:import OrgTree from '/@@/views/sys/admin/user/OrgTree.vue';

  }
  

  import { columns, searchFormSchema } from './data.data';
  import { useMessage } from '/@@/hooks/web/useMessage';
  import { get@(@Model.ClassName)PageList, delete@(@Model.ClassName) } from '/@@/api/main/@(@Model.ClassName)';
  export default defineComponent({
  @if(Model.IsUpload){
    @:components: { BasicTable, @(@Model.ClassName)Modal, TableAction,TableImg 
	  if(Model.HasTree){
           @:,OrgTree, PageWrapper
        }
        @:},
  }else{
     @:components:{ BasicTable, @(@Model.ClassName)Modal, TableAction
	  if(Model.HasTree){
           @:,OrgTree, PageWrapper
        }
        @:},
  }
    setup() {
      const { hasPermission } = usePermission();
      const { createMessage } = useMessage();
      const [registerModal, { openModal }] = useModal();
      const searchInfo = reactive<Recordable>({});
	
	  @if(Model.HasTree){
      @:const OrgTreeChild = ref(null);
	  }
      const [registerTable, { reload }] = useTable({
        title: '@(@Model.BusName)列表',
        api: get@(@Model.ClassName)PageList,
        pagination: true,
        rowKey: 'id',
        columns,
        formConfig: {
          labelWidth: 120,
          schemas: searchFormSchema,
          autoSubmitOnEnter: true,
        },
        useSearchForm: true,
        showTableSetting: true,
        bordered: true,
        canResize: true,
        actionColumn: {
          width: 150,
          title: '操作',
          dataIndex: 'action',
          slots: { customRender: 'action' },
        },
      });

      function handleCreate() {
        openModal(true, {
          isUpdate: false,
        });
      }

      function handleEdit(record: Recordable) {
        openModal(true, {
          record,
          isUpdate: true,
        });
      }

      async function handleDelete(record: Recordable) {
        await delete@(@Model.ClassName)(record);
        reload();
        createMessage.success('删除成功！');
      }
      function handleSuccess() {
        reload();
      }
	  @if(Model.HasDatePicker ){
	      @:function handleLastday() {
            @:reload();
          @:}
	      @:function handleNextday() {
            @:reload();
          @:}
	      @:function handleLastMonth() {
            @:reload();
          @:}
	      @:function handleNextMonth() {
            @:reload();
          @:}
	  }
      return {
        hasPermission,
        registerTable,
        searchInfo,
        registerModal,
        handleCreate,
        handleEdit,
        handleDelete,
        handleSuccess,
		@if(Model.HasTree){
        @:OrgTreeChild,
	  }
		@if(Model.HasDatePicker ){
        @:handleLastday,
        @:handleNextday,
        @:handleLastMonth,
        @:handleNextMonth,
		}
@if(@Model.IsUpload){
        @:downUrl: import.meta.env.VITE_GLOB_DOWNLOAD_URL,
}

      };
    },
  });
</script>