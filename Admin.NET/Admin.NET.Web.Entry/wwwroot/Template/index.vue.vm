<template>
  <div>
    <BasicTable @@register="registerTable">
      <template #toolbar>
        <a-button type="primary" @@click="handleCreate">新增@(@Model.BusName)</a-button>
      </template>
@foreach (var column in Model.TableField){
if(@column.EffectType == "Upload"){
      @:<template #@(@column.LowerColumnName)="{ text, record }">
        <TableImg
          v-if="text"
          :size="60"
          :simpleShow="true"
          :showBadge="false"
          :imgList="[downUrl + '/' + record.@(@column.LowerColumnName)Attachment.id + record.@(@column.LowerColumnName)Attachment.suffix]"
        />
      </template>
}
}
      <template #action="{ record }">
        <TableAction
          :actions="[
            {
              icon: 'clarity:note-edit-line',
              label: '编辑',
              onClick: handleEdit.bind(null, record),
            },
            {
              icon: 'ant-design:delete-outlined',
              color: 'error',
              label: '删除',
              popConfirm: {
                title: '是否确认删除',
                confirm: handleDelete.bind(null, record),
              },
            },
          ]"
        />
      </template>
    </BasicTable>
    <@(@Model.ClassName)Modal @@register="registerModal" @@success="handleSuccess" />
  </div>
</template>
<script lang="ts">
  import { defineComponent } from 'vue';
  @if(Model.IsUpload){
  @:import { BasicTable, useTable, TableAction, TableImg } from '/@@/components/Table';
  }else{
  @:import { BasicTable, useTable, TableAction } from '/@@/components/Table';
  }
  import { useModal } from '/@@/components/Modal';
  import @(@Model.ClassName)Modal from './dataModal.vue';

  import { columns, searchFormSchema } from './data.data';
  import { useMessage } from '/@@/hooks/web/useMessage';
  import { get@(@Model.ClassName)PageList, delete@(@Model.ClassName) } from '/@@/api/main/@(@Model.ClassName)';
  let searchvalue = undefined;
  export default defineComponent({
  @if(Model.IsUpload){
    @:components: { BasicTable, @(@Model.ClassName)Modal, TableAction, TableImg },
  }else{
     @:components:{ BasicTable, @(@Model.ClassName)Modal, TableAction },
  }
    setup() {
      const { createMessage } = useMessage();
      const [registerModal, { openModal }] = useModal();
      const [registerTable, { reload }] = useTable({
        title: '@(@Model.BusName)列表',
        api: get@(@Model.ClassName)PageList,
        pagination: true,
        beforeFetch(params) {
          params.searchvalue = searchvalue;
          return params;
        },
        rowKey: 'id',
        columns,
        formConfig: {
          labelWidth: 120,
          schemas: searchFormSchema,
          autoSubmitOnEnter: true,
        },
        useSearchForm: true,
        showTableSetting: true,
        bordered: true,
        canResize: true,
        actionColumn: {
          width: 150,
          title: '操作',
          dataIndex: 'action',
          slots: { customRender: 'action' },
        },
        handleSearchInfoFn(info) {
          searchvalue = info.searchvalue;
          return info;
        },
      });

      function handleCreate() {
        openModal(true, {
          isUpdate: false,
        });
      }

      function handleEdit(record: Recordable) {
        openModal(true, {
          record,
          isUpdate: true,
        });
      }

      async function handleDelete(record: Recordable) {
        await delete@(@Model.ClassName)(record);
        reload();
        createMessage.success('删除成功！');
      }
      function handleSuccess() {
        reload();
      }
      return {
        registerTable,
        registerModal,
        handleCreate,
        handleEdit,
        handleDelete,
        handleSuccess,
@if(@Model.IsUpload){
        @:downUrl: import.meta.env.VITE_GLOB_DOWNLOAD_URL,
}
      };
    },
  });
</script>