<template>
  <div>
    <BasicTable @@register="registerTable">
      <template #toolbar>
        <a-button type="primary"  @@click="handleCreate">新增@(@Model.BusName)</a-button>
      </template>
      <template #action="{ record }">
        <TableAction
          :actions="[
            {
              icon: 'clarity:note-edit-line',
              tooltip: '编辑',
              onClick: handleEdit.bind(null, record),
            },
            {
              icon: 'ant-design:delete-outlined',
              color: 'error',
              tooltip: '删除',  
              popConfirm: {
                title: '是否确认删除',
                confirm: handleDelete.bind(null, record),
              },
            },
          ]"
        />
      </template> 
    </BasicTable>
    <@(@Model.ClassName)Modal @@register="registerModal" @@success="handleSuccess" />
  </div>
</template>
<script lang="ts">
  import { defineComponent } from 'vue';
  import { BasicTable, useTable, TableAction } from '/@@/components/Table';
  import { useModal } from '/@@/components/Modal';
  import @(@Model.ClassName)Modal from './dataModal.vue';

  import { columns, searchFormSchema } from './data.data';
  import { useMessage } from '/@@/hooks/web/useMessage';
  import { get@(@Model.ClassName)Page, delete@(@Model.ClassName) } from '/@@/api/modular/main/@(@Model.ClassName)';
  let searchvalue = undefined;
  export default defineComponent({
    components: { BasicTable, @(@Model.ClassName)Modal, TableAction },
    setup() {
      const { createMessage } = useMessage();
      const [registerModal, { openModal }] = useModal();
      const tbPageApi = async (params: any) => {
          const result = await get@(@Model.ClassName)Page(params);
          return result.data;
        };
        const [registerTable, { reload }] = useTable({
          title: '@(@Model.BusName)列表',
          api: tbPageApi,
          pagination: true,
          beforeFetch(params) {
            params.searchvalue = searchvalue;
            return params;
          },
          rowKey: 'id',
          columns,
          formConfig: {
            labelWidth: 120,
            schemas: searchFormSchema,
            autoSubmitOnEnter: true,
          },
          useSearchForm: true,
          showTableSetting: true,
          bordered: true,
          canResize: true,
          actionColumn: {
            width: 120,
            title: '操作',
            dataIndex: 'action',
            slots: { customRender: 'action' },
          },
          handleSearchInfoFn(info) {
            searchvalue = info.searchvalue;
            return info;
          },
        });

        function handleCreate() {
          openModal(true, {
            isUpdate: false,
          });
        }

        function handleEdit(record: Recordable) {
          openModal(true, {
            record,
            isUpdate: true,
          });
        }

        async function handleDelete(record: Recordable) {
          const ret = await delete@(@Model.ClassName)(record);
          if (ret.success) {
            createMessage.success('删除成功！');
            reload();
          }
        }

        function handleSuccess({ isUpdate, values }) {
            reload();
        } 

        return {
          registerTable,
          registerModal,
          handleCreate,
          handleEdit,
          handleDelete,
          handleSuccess,
        };
      },
  });
</script>

