// Admin.NET 项目的版权、商标、专利和其他相关权利均受相应法律法规的保护。使用本项目应遵守相关法律法规和许可证的要求。
//
// 本项目主要遵循 MIT 许可证和 Apache 许可证（版本 2.0）进行分发和使用。许可证位于源代码树根目录中的 LICENSE-MIT 和 LICENSE-APACHE 文件。
//
// 不得利用本项目从事危害国家安全、扰乱社会秩序、侵犯他人合法权益等法律法规禁止的活动！任何基于本项目二次开发而产生的一切法律纠纷和责任，我们不承担任何责任！

using Admin.NET.Core.Service;
using Microsoft.AspNetCore.Http;
@{
    string joinTableName = "u";
    string joinTableAlias = "";
    Dictionary<string, int> definedObjects = new Dictionary<string, int>();
    bool haveLikeCdt = false;
    foreach (var column in Model.TableField){
        if (column.QueryWhether == "Y" && column.QueryType == "like"){
            haveLikeCdt = true;
        }
    }
    var hasSetStatus = Model.TableField.Any(col => col.NetType == "StatusEnum" && col.PropertyName == "Status");
    var dictTableField = Model.TableField.Where(x => x.WhetherImport == "Y" && x.EffectType == "Select") ?? default;
    var hasdictService = dictTableField.Count() > 0;
    var importField = Model.TableField.Where(x => x.WhetherImport == "Y");
    var displayColumnList = new List<string>();
}
namespace @(Model.NameSpace).Service;

/// <summary>
/// @(Model.BusName)服务
/// </summary>
[ApiDescriptionSettings(@(Model.ProjectLastName)Const.GroupName, Order = 100)]
public class @(Model.ClassName)Service : IDynamicApiController, ITransient
{
    private readonly SqlSugarRepository<@(Model.ClassName)> _@(Model.LowerClassName)Rep;
@if (hasdictService) {
    @:private readonly SysDictTypeService _sysDictTypeService;
}
    public @(Model.ClassName)Service(SqlSugarRepository<@(Model.ClassName)> @(Model.LowerClassName)Rep
@if (hasdictService) {
        @:,SysDictTypeService sysDictTypeService
}
    ){
        _@(Model.LowerClassName)Rep = @(Model.LowerClassName)Rep;
@if (hasdictService) {
        @:_sysDictTypeService = sysDictTypeService;
}
    }

    /// <summary>
    /// 分页查询@(Model.BusName)
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    [ApiDescriptionSettings(Name = "Page")]
    [DisplayName("分页查询@(Model.BusName)")]
    public async Task<SqlSugarPagedList<@(Model.ClassName)Output>> Page(Page@(Model.ClassName)Input input)
    {
@if (haveLikeCdt) {
		@:input.Keyword = input.Keyword?.Trim();
}
        var query = _@(Model.LowerClassName)Rep.AsQueryable()
@{string conditionFlag = "";}
@if (haveLikeCdt) {
            @:.WhereIF(!string.IsNullOrEmpty(input.Keyword), u =>
    @foreach (var column in Model.TableField){
        if (column.QueryWhether == "Y" && column.QueryType == "like"){
                @:@(conditionFlag)u.@(column.PropertyName).Contains(input.Keyword)
            conditionFlag="|| ";
        }
    }
            @:)
}
@foreach (var column in Model.TableField){
if (column.QueryWhether == "Y"){
    if (column.NetType?.TrimEnd('?') == "string"){
        if(column.QueryType == "like"){
            @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.PropertyName), u => u.@(column.PropertyName).Contains(input.@(column.PropertyName).Trim()))
        }else{
            @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.PropertyName), u => u.@(column.PropertyName) @column.QueryType input.@(column.PropertyName))
        }
    }else if(column.NetType?.TrimEnd('?') == "int" || column.NetType?.TrimEnd('?') == "long"){
            @:.WhereIF(input.@column.PropertyName != null, u => u.@(column.PropertyName) @column.QueryType input.@(column.PropertyName))
    }else if(column.NetType?.TrimEnd('?') == "DateTime" && column.QueryType == "~"){
            @:.WhereIF(input.@(column.PropertyName)Range != null && input.@(column.PropertyName)Range.Length == 2, u => u.@(column.PropertyName) >= input.@(column.PropertyName)Range[0] && u.@(column.PropertyName) <= input.@(column.PropertyName)Range[1])
    }else if(column.NetType?.TrimEnd('?').EndsWith("Enum") == true) {
            @:.WhereIF(input.@(column.PropertyName).HasValue, u => u.@(column.PropertyName) @column.QueryType input.@(column.PropertyName))
    }
} 
}
@if(Model.IsJoinTable){
            @:// 处理外键和TreeSelector相关字段的连接
    @foreach (var column in Model.TableField.Where(u => u.EffectType == "fk" || u.EffectType == "ApiTreeSelect")){
            joinTableAlias = Regex.Replace(column.LowerPropertyName, "[iI]d$", "");
            joinTableName += ", " + joinTableAlias;
            @:.LeftJoin<@column.FkEntityName>((@joinTableName) => u.@(column.PropertyName) == @joinTableAlias.@(column.EffectType == "fk" ? column.FkLinkColumnName : column.ValueColumn))
    }
            @:.Select((@joinTableName) => new @(Model.ClassName)Output
            @:{
@foreach (var column in Model.TableField){
                joinTableAlias = Regex.Replace(column.LowerPropertyName, "[iI]d$", "");
                if(column.EffectType == "fk"){
                @:@(column.PropertyName) = u.@(column.PropertyName), 
                @:@(column.PropertyName)@(column.FkColumnName) = @(joinTableAlias).@(column.FkColumnName),
                } else if(column.EffectType == "ApiTreeSelect"){
                displayColumnList = column.DisplayColumn.Split(",").Select(u => $"{{{joinTableAlias}.{u}}}").ToList();
                @:@(column.PropertyName) = u.@(column.PropertyName),  
                @:@(column.PropertyName)Display = $"@(string.Join("-", displayColumnList))",
                } else if(column.NetType?.TrimEnd('?').EndsWith("Enum") == true){
                @:@(column.PropertyName) = u.@(column.PropertyName),
                } else {
                @:@(column.PropertyName) = u.@(column.PropertyName),
                }
}
            @:});
@foreach (var column in Model.TableField){
    if(column.EffectType == "fk"){   
 
    }else if(column.EffectType == "Upload"){
            @://.Mapper(c => c.@(column.PropertyName)Attachment, c => c.@(column.PropertyName))
    }
}
} else {
            @:.Select<@(Model.ClassName)Output>();
}
		return await query.OrderBuilder(input).ToPagedListAsync(input.Page, input.PageSize);
    }

    /// <summary>
    /// 增加@(Model.BusName)
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    [ApiDescriptionSettings(Name = "Add")]
    [DisplayName("增加@(Model.BusName)")]
    public async Task<long> Add(Add@(Model.ClassName)Input input)
    {
        var entity = input.Adapt<@(Model.ClassName)>();
        await _@(Model.LowerClassName)Rep.InsertAsync(entity);
        return entity.Id;
    }

    /// <summary>
    /// 删除@(Model.BusName)
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    [ApiDescriptionSettings(Name = "Delete")]
    [DisplayName("删除@(Model.BusName)")]
    public async Task Delete(Delete@(Model.ClassName)Input input)
    {
@foreach (var column in Model.TableField.Where(u => u.ColumnKey == "True")){
        @:var entity = await _@(Model.LowerClassName)Rep.GetFirstAsync(u => u.@(column.PropertyName) == input.@(column.PropertyName)) ?? throw Oops.Oh(ErrorCodeEnum.D1002);
}
        await _@(Model.LowerClassName)Rep.FakeDeleteAsync(entity);   //假删除
        //await _@(Model.LowerClassName)Rep.DeleteAsync(entity);   //真删除
    }

    /// <summary>
    /// 批量删除@(Model.BusName)
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    [ApiDescriptionSettings(Name = "BatchDelete")]
    [DisplayName("批量删除@(Model.BusName)")]
    public async Task<int> BatchDelete(BatchDelete@(Model.ClassName)Input input)
    {
@foreach (var column in Model.TableField.Where(u => u.ColumnKey == "True")){
        @:var list = await _@(Model.LowerClassName)Rep.AsQueryable().Where(u => input.@(column.PropertyName)List.Contains(u.@(column.PropertyName))).ToListAsync() ?? throw Oops.Oh(ErrorCodeEnum.D1002);
}
        return await _@(Model.LowerClassName)Rep.FakeDeleteAsync(list);   //假删除
        //return await _@(Model.LowerClassName)Rep.DeleteAsync(list);   //真删除
    }

    /// <summary>
    /// 更新@(Model.BusName)
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpPost]
    [ApiDescriptionSettings(Name = "Update")]
    [DisplayName("更新@(Model.BusName)")]
    public async Task Update(Update@(Model.ClassName)Input input)
    {
        var entity = input.Adapt<@(Model.ClassName)>();
        await _@(Model.LowerClassName)Rep.AsUpdateable(entity).IgnoreColumns(ignoreAllNullColumns: true).ExecuteCommandAsync();
    }
@if (hasSetStatus) {
@:
    @:/// <summary>
    @:/// 设置@(Model.BusName)状态
    @:/// </summary>
    @:/// <param name="input"></param>
    @:/// <returns></returns>
    @:[ApiDescriptionSettings(Name = "SetStatus"), HttpPost]
    @:[DisplayName("设置@(Model.BusName)状态")]
    @:public async Task SetStatus(BaseStatusInput input)
    @:{
        @:await _@(Model.LowerClassName)Rep.AsUpdateable().SetColumns(u => u.Status, input.Status).Where(u => u.Id == input.Id).ExecuteCommandAsync();
    @:} 
}

    /// <summary>
    /// 获取@(Model.BusName)
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpGet]
    [ApiDescriptionSettings(Name = "Detail")]
    [DisplayName("获取@(Model.BusName)")]
    public async Task<@(Model.ClassName)> Detail([FromQuery] QueryById@(Model.ClassName)Input input)
    {
@foreach (var column in Model.TableField){
if (@column.ColumnKey == "True"){
        @:return await _@(Model.LowerClassName)Rep.GetFirstAsync(u => u.@(column.PropertyName) == input.@(column.PropertyName));
}   
}            
    }

    /// <summary>
    /// 获取@(Model.BusName)列表
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    [HttpGet]
    [ApiDescriptionSettings(Name = "List")]
    [DisplayName("获取@(Model.BusName)列表")]
    public async Task<List<@(Model.ClassName)Output>> List([FromQuery] Page@(Model.ClassName)Input input)
    {
        return await _@(Model.LowerClassName)Rep.AsQueryable().Select<@(Model.ClassName)Output>().ToListAsync();
    }
@foreach (var column in Model.TableField){
if(column.EffectType == "fk" && (@column.WhetherAddUpdate == "Y" || column.QueryWhether == "Y")){
@:
    @:/// <summary>
    @:/// 获取@(column.ColumnComment)列表
    @:/// </summary>
    @:/// <returns></returns>
    @:[ApiDescriptionSettings(Name = "@(column.FkEntityName)@(column.PropertyName)Dropdown"), HttpGet]
    @:[DisplayName("获取@(column.ColumnComment)列表")]
    @:public async Task<dynamic> @(column.FkEntityName)@(column.PropertyName)Dropdown()
    @:{
        @:return await _@(Model.LowerClassName)Rep.Context.Queryable<@(column.FkEntityName)>().Select(u => new
            @:{
                @:Label = u.@(column.FkColumnName),
                @:Value = u.@(column.FkLinkColumnName)
            @:}
        @:).ToListAsync();
    @:}
}
}
@foreach (var column in Model.TableField){
if(column.EffectType == "Upload"){
@:
    @:/// <summary>
    @:/// 上传@(column.ColumnComment)
    @:/// </summary>
    @:/// <param name="file"></param>
    @:/// <returns></returns>
    @:[ApiDescriptionSettings(Name = "Upload@(column.PropertyName)"), HttpPost]
    @:[DisplayName("上传@(column.ColumnComment)")]
    @:public async Task<SysFile> Upload@(column.PropertyName)([Required] IFormFile file)
    @:{
            @:var service = App.GetRequiredService<SysFileService>();
            @:return await service.UploadFile(new FileUploadInput { File = file, Path = "upload/@(column.PropertyName)" }); 
    @:} 
}
}
@foreach (var column in Model.TableField){
if(column.EffectType == "ApiTreeSelect" && !definedObjects.ContainsKey("@(column.FkEntityName)Tree")){
@:
    definedObjects.Add("@(column.FkEntityName)Tree", 1);
    @:/// <summary>
    @:/// 获取@(column.ColumnComment)选择数据
    @:/// </summary>
    @:[ApiDescriptionSettings(Name = "@(column.FkEntityName)Tree")]
    @:[DisplayName("获取@(column.ColumnComment)选择数据")]
    @:public async Task<List<@(column.FkEntityName)TreeOutput>> @(column.FkEntityName)Tree()
    @:{
        displayColumnList = column.DisplayColumn.Split(",").Select(u => $"{{u.{u}}}").ToList();
        @:return await _@(Model.LowerClassName)Rep.Context.Queryable<@(column.FkEntityName)>().Select(u => new @(column.FkEntityName)TreeOutput {
            @:Label = $"@(string.Join("-", displayColumnList))",
            @:Value = u.@column.ValueColumn
        @:}, true).ToTreeAsync(u => u.Children, u => u.@(column.PidColumn), @(column.WhetherRequired == "Y" ? "0" : "null"));
    @:}
}
}
@if (hasdictService) {
@:
    @:/// <summary>
    @:/// 获取字典文本列表
    @:/// </summary>
    @:/// <param name="dictTypeCode"></param>
    @:/// <returns></returns>
    @:private List<string> GetDictDataTextList(string dictTypeCode)
    @:{
    @:    return _sysDictTypeService.GetDataList(new GetDataDictTypeInput { Code = dictTypeCode }).Result?.Select(x => x.Value).ToList();
    @:}
}
@if (importField?.Count() > 0) {
@:
    @:/// <summary>
    @:/// 下载@(Model.BusName)数据导入模板
    @:/// </summary>
    @:/// <returns></returns>
    @:[DisplayName("下载@(Model.BusName)数据导入模板")]
    @:[ApiDescriptionSettings(Name = "Import"), HttpGet, NonUnify]
    @:public IActionResult DownloadTemplate()
    @:{
        @:return ExcelHelper.ExportTemplate(new List<Export@(Model.ClassName)Output>(), "@(Model.BusName)导入模板");
    @:}
@:
    @:/// <summary>
    @:/// 导入@(Model.BusName)记录 📃
    @:/// </summary>
    @:/// <returns></returns>
    @:[DisplayName("导入@(Model.BusName)记录")]
    @:[ApiDescriptionSettings(Name = "Import"), HttpPost, NonUnify, UnitOfWork]
    @:public IActionResult ImportData([Required] IFormFile file)
    @:{
        @:lock (this)
        @:{
            foreach (var column in dictTableField){
            @:var @(@column.LowerPropertyName)DictMap = _sysDictTypeService.GetDataList(new GetDataDictTypeInput { Code = "@(@column.DictTypeCode)" }).Result.ToDictionary(x => x.Value, x => x.Code);
            }
            @:var stream = ExcelHelper.ImportData<Import@(@Model.ClassName)Input, @(@Model.ClassName)>(file, (list, markerErrorAction) =>
            @:{
                @:_@(@Model.LowerClassName)Rep.Context.Utilities.PageEach(list, 2048, pageItems =>
                @:{
                    @:// 校验并过滤必填基本类型为null的字段
                    @:var rows = pageItems.Where(x => {
                        foreach (var column in importField.Where(x => x.WhetherRequired == "Y" && Regex.IsMatch(x.NetType, "(int|long|double|float|bool|Enum[?]?)"))){
                        @:if (x.@(@column.PropertyName) == null){
                            @:x.Error = "@(@column.ColumnComment)不能为空";
                            @:return false;
                        @:}
                        }
                        @:return true;
                    @:}).Adapt<List<@(@Model.ClassName)>>();
                    if (hasdictService){
                    @:// 映射字典值
                    @:foreach(var row in rows){
                        foreach (var column in dictTableField){
                        @:row.@(@column.PropertyName) = @(@column.LowerPropertyName)DictMap.GetValueOrDefault(row.@(@column.PropertyName) ?? "");
                        }
                    @:}
                    }
                    @:var storageable = _@(@Model.LowerClassName)Rep.Context.Storageable(rows)
                        foreach (var column in importField){
                        if (@column.WhetherRequired == "Y"){
                        if(column.NetType.TrimEnd('?') == "string"){
                        @:.SplitError(it => string.IsNullOrWhiteSpace(it.Item.@(@column.PropertyName)), "@(@column.ColumnComment)不能为空")
                        } else if(column.NetType.EndsWith('?') == true){
                        @:.SplitError(it => it.Item.@(@column.PropertyName) == null, "@(@column.ColumnComment)不能为空")
                        }}
                        if (@column.NetType?.TrimEnd('?') == "string"){
                        @:.SplitError(it => it.Item.@(@column.PropertyName)?.Length > @column.ColumnLength, "@(@column.ColumnComment)长度不能超过@(@column.ColumnLength)个字符")
                        }}
                        @:.ToStorage();

                    @:storageable.BulkCopy();
                    @:storageable.BulkUpdate();
                    
                    @:markerErrorAction.Invoke(storageable, pageItems, rows);
                @:});
            @:});
@:
            @:return stream;
        @:}
    @:}
}
@}
