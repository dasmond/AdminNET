@{
	bool IsStatusEnum(dynamic column) => column.NetType == "StatusEnum" && column.PropertyName == "Status";
	string LowerFirstLetter(string text) => text.ToString()[..1].ToLower() + text[1..];
	var definedObjects = new Dictionary<string, int>();
	var pkField = Model.TableField.Where(c => c.ColumnKey == "True").FirstOrDefault();
	var pkFieldName = LowerFirstLetter(pkField.PropertyName);
	var displayColumnList = new List<string>();
}
<template>
	<div class="@(Model.LowerClassName)-container">
		<el-dialog v-model="isShowDialog" :width="800" draggable="" :close-on-click-modal="false">
			<template #header>
				<div style="color: #fff">
					<!--<el-icon size="16" style="margin-right: 3px; display: inline; vertical-align: middle"> <ele-Edit /> </el-icon>-->
					<span>{{ props.title }}</span>
				</div>
			</template>
			<el-form :model="ruleForm" ref="ruleFormRef" label-width="auto" :rules="rules">
				<el-row :gutter="35">
					@foreach (var column in Model.TableField){
					if(column.ColumnKey == "True"){
					@:<el-form-item v-show="false">
						<el-input v-model="ruleForm.@(column.LowerPropertyName)" />
					</el-form-item>
					}else{
					if (column.WhetherAddUpdate == "Y"){
					if(column.EffectType == "fk"){
					var dropdownName = $"{column.FkEntityName}{Regex.Replace(column.PropertyName, "[iI]d$", "")}Dropdown";
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							@:<el-select clearable filterable v-model="ruleForm.@(column.LowerPropertyName)" placeholder="请选择@(column.ColumnComment)">
								@:<el-option v-for="(item,index) in @LowerFirstLetter(dropdownName)List" :key="index" :value="item.value" :label="item.label" />
							</el-select>
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "ApiTreeSelect"){
					displayColumnList = column.DisplayColumn.Split(",").Select(u => $"${{data.{LowerFirstLetter(u)}}}").ToList();
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							<el-cascader
								@:options="@LowerFirstLetter(@column.FkEntityName)TreeData"
								@:props="{ checkStrictly: true, emitPath: false, value: '@LowerFirstLetter(@column.ValueColumn)' }"
								placeholder="请选择@(column.ColumnComment)"
								clearable
								filterable
								class="w100"
								v-model="ruleForm.@(column.LowerPropertyName)"
							>
								<template #default="{ node, data }">
									<span>{{ data.label }}</span>
									<span v-if="!node.isLeaf"> ({{ data.children.length }}) </span>
								</template>
							</el-cascader>
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "Input"){
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							@:<el-input v-model="ruleForm.@(column.LowerPropertyName)" placeholder="请输入@(column.ColumnComment)" maxlength="@(column.ColumnLength)" show-word-limit clearable />
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "InputNumber"){
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							@:<el-input-number v-model="ruleForm.@(column.LowerPropertyName)" placeholder="请输入@(column.ColumnComment)" clearable />
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "InputTextArea"){
					@:<el-col :xs="24" :sm="24" :md="24" :lg="24" :xl="24" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							@:<el-input v-model="ruleForm.@(column.LowerPropertyName)" placeholder="请输入@(column.ColumnComment)" type="textarea" maxlength="@(column.ColumnLength)" show-word-limit clearable />
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "Select" || column.EffectType == "EnumSelector"){
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20" @(IsStatusEnum(column) ? $"v-if='!ruleForm.{pkFieldName}'" : "")>
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							if (IsStatusEnum(column)) {
							@:<el-switch v-model="ruleForm.@column.LowerPropertyName" :active-value="1" :inactive-value="2" size="small" />
							} else {
							@:<el-select clearable filterable v-model="ruleForm.@(column.LowerPropertyName)" placeholder="请选择@(column.ColumnComment)">
								@:<el-option v-for="(item, index) in dl('@(column.DictTypeCode)')"  :key="index" :value="@(column.NetType.StartsWith("string") ? "item.code" : "Number(item.code)")" :label="`[${item.code}] ${item.value}`"></el-option>
							@:</el-select>
							}
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "ConstSelector"){
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							@:<el-select clearable filterable v-model="ruleForm.@(column.LowerPropertyName)" placeholder="请选择@(column.ColumnComment)">
								@:<el-option v-for="(item,index) in getConstType('@column.DictTypeCode')" :key="index" :label="item.name" :value="@(column.NetType.StartsWith("string") ? "item.code" : "Number(item.code)")">{{ item.name }}</el-option>
							</el-select>
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "Switch"){
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							@:<el-switch v-model="ruleForm.@(column.LowerPropertyName)" active-text="是" inactive-text="否" />
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "DatePicker"){
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							@:<el-date-picker v-model="ruleForm.@(column.LowerPropertyName)" type="date" placeholder="@(column.ColumnComment)" />
						</el-form-item>
					</el-col>
					}else if(column.EffectType == "Upload"){
					@:<el-col :xs="24" :sm="12" :md="12" :lg="12" :xl="12" class="mb20">
						@:<el-form-item label="@column.ColumnComment" prop="@(column.LowerPropertyName)">
							@:<el-upload
							@:list-type="picture-card"
							@::show-file-list="false"
							@::http-request="upload@(column.PropertyName)Handle">
								@:<img
								@:v-if="ruleForm.@(column.LowerPropertyName)"
								@::src="ruleForm.@(column.LowerPropertyName)"
								@:@@click="ruleForm.@(column.LowerPropertyName)=''"
								@:style="width: 100%; height: 100%; object-fit: contain"/>
								@:<el-icon v-else><Plus /></el-icon>
							</el-upload>
						</el-form-item>
					</el-col>
					}else{
					}
					}
					}
					}
				</el-row>
			</el-form>
			<template #footer>
				<span class="dialog-footer">
					<el-button @@click="cancel">取 消</el-button>
					<el-button type="primary" @@click="submit">确 定</el-button>
				</span>
			</template>
		</el-dialog>
	</div>
</template>
<style lang="scss" scoped>
:deep(.el-select), :deep(.el-input-number) {
	width: 100%;
}
</style>
<script lang="ts" setup name="@(Model.LowerClassName)">
	import { ref,onMounted } from "vue";
	import { ElMessage } from "element-plus";
	import type { FormRules } from "element-plus";
@if(Model.TableField.Any(x=>x.EffectType == "ConstSelector")){
	@:import { getConstType } from "/@@/utils/constHelper";
} 
@if(Model.TableField.Any(x=>x.EffectType == "Select") || @Model.TableField.Any(x=>x.EffectType == "EnumSelector")){
	@:import { getDictDataItem as di, getDictDataList as dl } from '/@@/utils/dict-utils';
}
@if(Model.TableField.Any(x=>x.EffectType == "EnumSelector")){
	@:import { getDictLabelByVal as dv } from '/@@/utils/dict-utils';
}
@if(Model.TableField.Any(x=>x.EffectType == "DatePicker")){
  	@:import { formatDate } from '/@@/utils/formatTime';
}
@if(Model.TableField.Any(x=>x.EffectType == "Upload")){
    @:import { Plus } from "@@element-plus/icons-vue";
    @:import { UploadRequestOptions } from "element-plus";
}
@if(Model.TableField.Any(x=>x.EffectType == "EnumSelector")){
	@:import { getAPI } from '/@@/utils/axios-utils';
	@:import { SysEnumApi } from '/@@/api-services/api';
}
	import { use@(Model.ClassName)Api } from '/@@/api/@(Model.PagePath)/@(Model.LowerClassName)';

	//父级传递来的参数
	var props = defineProps({
		title: {
			type: String,
			default: "",
		},
	});
	//父级传递来的函数，用于回调
	const emit = defineEmits(["reloadTable"]);
	const ruleFormRef = ref();
	const isShowDialog = ref(false);
	const ruleForm = ref<any>({});
	const @(Model.LowerClassName)Api = use@(Model.ClassName)Api();
	//自行添加其他规则
	const rules = ref<FormRules>({
@foreach (var column in Model.TableField){
	if(column.WhetherRequired == "Y"){
		if(column.EffectType == "Input" || @column.EffectType == "InputNumber" || @column.EffectType == "InputTextArea"){
		@:@column.LowerPropertyName: [{required: true, message: '请输入@(column.ColumnComment)！', trigger: 'blur',},],
		}else if(column.EffectType == "DatePicker" || @column.EffectType == "Select" || @column.EffectType == "EnumSelector" || @column.EffectType == "ApiTreeSelect"){
		@:@column.LowerPropertyName: [{required: true, message: '请选择@(column.ColumnComment)！', trigger: 'change',},],
		}
    }
}
	});

	// 页面加载时
	onMounted(() => {

	});

	// 打开弹窗
	const openDialog = async (row: any) => {
		// ruleForm.value = JSON.parse(JSON.stringify(row));
		// 改用detail获取最新数据来编辑
		let rowData = JSON.parse(JSON.stringify(row));
		if (rowData.id)
			ruleForm.value = (await @(Model.LowerClassName)Api.detail(rowData.id)).data.result;
		else
			ruleForm.value = rowData;
		isShowDialog.value = true;
	};

	// 关闭弹窗
	const closeDialog = () => {
		emit("reloadTable");
		isShowDialog.value = false;
	};

	// 取消
	const cancel = () => {
		isShowDialog.value = false;
	};

	// 提交
	const submit = async () => {
		ruleFormRef.value.validate(async (isValid: boolean, fields?: any) => {
			if (isValid) {
				let values = ruleForm.value;
				if (ruleForm.value.@(pkFieldName) == undefined || ruleForm.value.@(pkFieldName) == null || ruleForm.value.@(pkFieldName) == "" || ruleForm.value.@(pkFieldName) == 0) {
					await @(Model.LowerClassName)Api.add(values);
				} else {
					await @(Model.LowerClassName)Api.update(values);
				}
				closeDialog();
			} else {
				ElMessage({
					message: `表单有${Object.keys(fields).length}处验证失败，请修改后再提交`,
					type: "error",
				});
			}
		});
	};
	
	@foreach (var column in Model.TableField) {
	if (column.EffectType == "fk" && column.WhetherAddUpdate == "Y") {
		var dropdownName = $"{column.FkEntityName}{Regex.Replace(column.PropertyName, "[iI]d$", "")}Dropdown";
	@:const @LowerFirstLetter(dropdownName)List = ref<any>([]);
	@:const get@(dropdownName)List = async () => {
		@:const list = await @(Model.LowerClassName)Api.get@(dropdownName)(true);
		@:@LowerFirstLetter(dropdownName)List.value = list.data.result ?? [];
	@:};
	@:get@(dropdownName)List();
	@:
	} else if (column.EffectType == "ApiTreeSelect" && !definedObjects.ContainsKey("define_get@(column.FkEntityName)TreeData")) {
		definedObjects.Add("define_get@(column.FkEntityName)TreeData", 1);
	@:const @LowerFirstLetter(@column.FkEntityName)TreeData = ref<any>([]);
	@:const get@(column.FkEntityName)TreeData = async () => {
		@:const list = await @(Model.LowerClassName)Api.get@(column.FkEntityName)Tree(true);
		@:@LowerFirstLetter(@column.FkEntityName)TreeData.value = list.data.result ?? [];
	@:};
	@:get@(column.FkEntityName)TreeData();
	@:
	} else if (column.WhetherAddUpdate == "Y" && column.EffectType == "Upload") {
	@:const upload@(column.PropertyName)Handle = async (options: UploadRequestOptions) => {
		@:const res = await @(Model.LowerClassName)Api.upload@(column.PropertyName)(options);
		@:ruleForm.value.@(column.LowerPropertyName) = res.data.result?.url;
	@:};
	@:
	}}
	//将属性或者函数暴露给父组件
	defineExpose({ openDialog });
</script>